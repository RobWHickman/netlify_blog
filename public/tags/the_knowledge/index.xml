<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>the_knowledge on Robert Hickman</title>
    <link>/tags/the_knowledge/</link>
    <description>Recent content in the_knowledge on Robert Hickman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Thu, 07 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/the_knowledge/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Knowledge 7th February 2019</title>
      <link>/post/the-knowledge-7th-february-2019/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/the-knowledge-7th-february-2019/</guid>
      <description>


&lt;p&gt;In what is becoming a &lt;a href=&#34;http://www.robert-hickman.eu/post/the-knowledge-4th-august-2018/&#34;&gt;repeated&lt;/a&gt; &lt;a href=&#34;http://www.robert-hickman.eu/post/counties_league_points/&#34;&gt;series&lt;/a&gt;, I enjoy answering trivia questions from The Guardian’s &lt;a href=&#34;https://www.theguardian.com/football/series/theknowledge&#34;&gt;The Knowledge&lt;/a&gt; football trivia column.&lt;/p&gt;
&lt;p&gt;There’s a few questions that built up that seemed amenable to coding answers so I’ve taken a stab at them here&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#munging
library(tidyverse)
library(data.table)
library(zoo)
#english football data
library(engsoccerdata)
#web data scraping
library(rvest)
#plotting
library(openair)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;calendar-boys&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Calendar Boys&lt;/h1&gt;
&lt;p&gt;The first question this week concerns players scoring on (or nearest to) every day of the year&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
Has any player played/or even scored on every date in a calendar year. What’s the nearest anyone has come?
&lt;/p&gt;
— David Thomson (&lt;span class=&#34;citation&#34;&gt;@thomsonionioni&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/thomsonionioni/status/1090206478479298560?ref_src=twsrc%5Etfw&#34;&gt;January 29, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;answer-cristiano-ronaldo-using-data-from-around-the-turn-of-the-millenium---244-days&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answer: Cristiano Ronaldo (using data from around the turn of the millenium) - 244 days&lt;/h3&gt;
&lt;p&gt;Getting the data for this is the main problem. The best (free) source I tend to use is transfermarkt.com, but data there becomes less reliable from before 2000 (and only has a few years of data from more obscure years where I could believe some players are banging in goals for fun). Nonetheless, it should at least gives us some ideas&lt;/p&gt;
&lt;p&gt;For each player sampled we’re going to want the data for each goal scored both for their club and country. Saving the competition data is also useful as it also allows us to sort out friendlies which may or may not count depending on interpretation of the question.&lt;/p&gt;
&lt;p&gt;Two quick functions will do this for any given player id&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#create a data frame of club goals
get_club_goals &amp;lt;- function(club_stats) {
  #read the page
  read &amp;lt;- read_html(club_stats)
  
  #get the players names
  name &amp;lt;- read %&amp;gt;%
    html_nodes(&amp;quot;.dataName b&amp;quot;) %&amp;gt;%
    html_text()
    
  #read the table of goals scored and munge together
  club_df &amp;lt;- read %&amp;gt;%
    html_nodes(xpath = &amp;#39;//*[@id=&amp;quot;main&amp;quot;]/div[10]/div/div/div[4]/table&amp;#39;) %&amp;gt;%
    html_table(fill = TRUE) %&amp;gt;%
    as.data.frame() %&amp;gt;%
    select(Date, Minute, Competition.1) %&amp;gt;%
    mutate(minute = as.numeric(gsub(&amp;quot;&amp;#39;.*&amp;quot;, &amp;quot;&amp;quot;, Minute))) %&amp;gt;%
    filter(!is.na(minute)) %&amp;gt;% 
    #convert date to day of the year
    mutate(date = case_when(
      Date != &amp;quot;&amp;quot; ~ strftime(as.Date(Date, &amp;quot;%m/%d/%y&amp;quot;), &amp;quot;%m/%d&amp;quot;)
    )) %&amp;gt;%
    mutate(competition = ifelse(Competition.1 == &amp;quot;&amp;quot;, NA, Competition.1)) %&amp;gt;%
    select(competition, date, minute) %&amp;gt;%
    #fill down the competition and date if missing
    do(na.locf(.)) %&amp;gt;%
    mutate(scored_for = &amp;quot;club&amp;quot;, name = name)
}

#do the same for national team goals
get_nt_goals &amp;lt;- function(nt_stats) {
  read &amp;lt;- read_html(nt_stats)
  
  name &amp;lt;- read %&amp;gt;%
    html_nodes(&amp;quot;.dataName b&amp;quot;) %&amp;gt;%
    html_text()

  goal_table &amp;lt;- read %&amp;gt;%
    html_nodes(xpath = &amp;#39;//*[@id=&amp;quot;main&amp;quot;]/div[10]/div[1]/div[3]/div[4]/table&amp;#39;)
  
  #some players won&amp;#39;t have any national team goals
  #return NA
  if(!is_empty(goal_table)) {
    nt &amp;lt;- goal_table %&amp;gt;%
      html_table(fill = TRUE) %&amp;gt;%
      as.data.frame() %&amp;gt;%
      select(For, Date, Var.11) %&amp;gt;%
      mutate(goals = as.numeric(Var.11)) %&amp;gt;%
      mutate(date = case_when(
        Date != &amp;quot;&amp;quot; ~ strftime(as.Date(Date, &amp;quot;%m/%d/%y&amp;quot;), &amp;quot;%m/%d&amp;quot;)
      )) %&amp;gt;%
      mutate(competition = ifelse(For == &amp;quot;&amp;quot;, NA, For)) %&amp;gt;%
      mutate(competition = na.locf(competition)) %&amp;gt;%
      filter(!is.na(date)) %&amp;gt;%
      select(competition, date, goals) 
    
    #if more than 1 goal is scored on a game it&amp;#39;s counted as two rows
    #separate these out
    if(any(nt$goals != 1)) {
      nt_df &amp;lt;- do.call(&amp;quot;c&amp;quot;, (mapply(rep, c(nt$competition, nt$date), nt$goals))) %&amp;gt;%
        matrix(., 2, byrow = TRUE) %&amp;gt;%
        t() %&amp;gt;%
        as.data.frame() %&amp;gt;%
        select(competition = V1, date = V2)
    } else {
      nt_df &amp;lt;- nt %&amp;gt;%
        select(-goals)
    }
    
    #finish off munging
    df &amp;lt;- nt_df %&amp;gt;%
      mutate(minute = NA, scored_for = &amp;quot;nation&amp;quot;, name = name)
  } else {
    df &amp;lt;- NA
  }
  return(df)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can get into the scraping. For each player some parts of the URL stay the same, so lets save those as objects so we don’t have to deal with massive long urls.&lt;/p&gt;
&lt;p&gt;I decided to test out the functions using Cristiano Ronaldo as his 675 goals for club and country is (I believe) more than any active player. Pasting the url together and running on the functions does the trick&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#for each player some parts of url stay the same
base_url &amp;lt;- &amp;quot;https://www.transfermarkt.co.uk/&amp;quot;
club_text1 &amp;lt;- &amp;quot;/alletore/spieler/&amp;quot;
club_text2 &amp;lt;- &amp;quot;/saison//verein/0/liga/0/wettbewerb//pos/0/trainer_id/0/minute/0/torart/0/plus/1&amp;quot;
nt_text1 &amp;lt;- &amp;quot;/nationalmannschaft/spieler/&amp;quot;
nt_text2 &amp;lt;- &amp;quot;/verein_id/3300/plus/0?hauptwettbewerb=&amp;amp;wettbewerb_id=&amp;amp;trainer_id=&amp;amp;start=Aug+20%2C+2003&amp;amp;ende=Feb+4%2C+2019&amp;amp;nurEinsatz=2&amp;quot;

#get all the goals scored by Cristiano Ronaldo
ronaldo &amp;lt;- rbind(
  paste0(base_url, &amp;quot;player_name&amp;quot;, club_text1, 8198, club_text2) %&amp;gt;%
    get_club_goals(),
  paste0(base_url, &amp;quot;player_name&amp;quot;, nt_text1, 8198, nt_text2) %&amp;gt;%
    get_nt_goals()
)

#count the number of unique dates scored on
length(unique(ronaldo$date))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 244&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So Ronaldo has scored on 244 of the 366 possible days of the year. It’s not surprising that scoring on &lt;em&gt;every&lt;/em&gt; day would be difficult. The club season only runs August-June and there are unlikely to be many possible games to play in July at all. Plus days such a Christmas are usually taken off from football.&lt;/p&gt;
&lt;p&gt;In terms of goals per day using 2019s calendar this looks like (plot made using the &lt;a href=&#34;https://cran.r-project.org/web/packages/openair/index.html&#34;&gt;openair package&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ronaldo %&amp;gt;%
  #count goals per date
  group_by(date) %&amp;gt;%
  summarise(goals = n()) %&amp;gt;%
  #convert to 2019 dates
  mutate(date = as.Date(paste0(&amp;quot;2019/&amp;quot;, date))) %&amp;gt;%
  #use calendarPlot from the openair package
  calendarPlot(., pollutant = &amp;quot;goals&amp;quot;, year = 2019)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-05-The_Knowledge_3_files/figure-html/ronaldo_calendar-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Which shows more deviation in scoring than I thought it would. Nevertheless, from September-May each year is pretty blocked out, though there is a run of Saturdays this December which could be fertile ground for increasing his total.&lt;/p&gt;
&lt;p&gt;Next we need to get a list of likely players who could come close to matching Ronaldo’s record.&lt;/p&gt;
&lt;p&gt;For this I took the first page of transfermarkt’s top scorers of the year across all leagues. It’s possible that a player might (e.g.) be on the second page each year and have scored a ton, but I don’t think it’s super likely.&lt;/p&gt;
&lt;p&gt;I run this through the top scorers page from 1995 (the earliest year available) to 2018 and grab each player id. Afterwards, save the scraped list as an .rds to prevent needing to continually re scrape the page and put extra load onto the server.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#the url for the pages of top scorers
top_scorer_ids &amp;lt;- paste0(base_url, 
                         &amp;quot;spieler-statistik/jahrestorschuetzen/&amp;quot;,
                         &amp;quot;statistik/stat/plus/0/galerie/0?jahr=&amp;quot;,
                         1995:2018,
                         &amp;quot;&amp;amp;wettbewerb=alle&amp;amp;monatVon=01&amp;amp;monatBis=12&amp;amp;altersklasse=&amp;amp;&amp;quot;,
                         &amp;quot;land_id=&amp;amp;ausrichtung=alle&amp;amp;spielerposition_id=alle&amp;amp;art=0&amp;quot;) %&amp;gt;%
  #scrape the ids of players
  lapply(., function(year) {
    read_html(year) %&amp;gt;%
      html_nodes(&amp;quot;#yw1 .spielprofil_tooltip&amp;quot;) %&amp;gt;%
      html_attr(&amp;quot;id&amp;quot;)
  }) %&amp;gt;%
  unlist() %&amp;gt;%
  unique()

#save this to prevent need for re-scraping
saveRDS(top_scorer_ids, &amp;quot;transfermarkt_top_scorers.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then all that’s left is to scrape the goals for each player whose id we’ve scraped. Again, save this once run, especially as it takes a fair while to complete. For this article the data was scraped on the 5th February 2019&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;player_goals &amp;lt;- top_scorer_ids %&amp;gt;%
  #for each player scrape every goal
  lapply(., function(id) {
    goals &amp;lt;- rbind(
      paste0(base_url, &amp;quot;player_name&amp;quot;, club_text1, id, club_text2) %&amp;gt;%
        get_club_goals(),
      paste0(base_url, &amp;quot;player_name&amp;quot;, nt_text1, id, nt_text2) %&amp;gt;%
        get_nt_goals()
    ) %&amp;gt;%
      #remove NAS
      #this is where a player hasn&amp;#39;t scored for their nation
      filter(!is.na(date)) %&amp;gt;%
      mutate(id = id)
  }) %&amp;gt;%
  do.call(rbind, .)

#and save
saveRDS(player_goals, &amp;quot;top_scorer_goals.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a list of every goal scored by prolific strikers, we just have to group by each player and count how many dates they’ve scored on. To get the players with the highest number of unique dates we group by their id and count the length of the unique dates they’ve scored on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;days_per_player &amp;lt;- player_goals %&amp;gt;%
  #group by player
  group_by(id) %&amp;gt;%
  #count the dates scored on
  summarise(days = length(unique(date))) %&amp;gt;%
  arrange(-days) %&amp;gt;%
  #rejoin the name data back in
  left_join(.,
            player_goals %&amp;gt;%
              select(id, name) %&amp;gt;%
              unique(),
            by = &amp;quot;id&amp;quot;) %&amp;gt;%
  print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 413 x 3
##    id     days name             
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            
##  1 8198    244 Cristiano Ronaldo
##  2 28003   210 Messi            
##  3 7349    203 Raúl             
##  4 3455    200 Ibrahimovic      
##  5 3207    189 Henry            
##  6 4257    187 Eto&amp;#39;o            
##  7 3924    173 Drogba           
##  8 48280   173 Cavani           
##  9 44352   172 Suárez           
## 10 7980    171 Villa            
## # ... with 403 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so perhaps unsurprisingly, Ronaldo comes out on top. As expected given the data source, most of the top players are very recent strikers- all of the top 10 were active well into the 2010s. &lt;a href=&#34;https://en.wikipedia.org/wiki/Ulf_Kirsten&#34;&gt;Ulf Kirsten&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Toni_Polster&#34;&gt;Toni Polster&lt;/a&gt; are the torchbearers for strikers from the 90s.&lt;/p&gt;
&lt;p&gt;As always in these posts, I try to learn some new stuff as I do them. I thought this might be a good time to try some circular plotting. I don’t think the resultant plots actually inform that much but they are cool to look at.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circular_data &amp;lt;- player_goals %&amp;gt;%
  #filter out top 16 scorers
  filter(id %in% days_per_player$id[1:16]) %&amp;gt;%
  #group by month and player and sum
  mutate(month = gsub(&amp;quot;\\/.*&amp;quot;, &amp;quot;&amp;quot;, date)) %&amp;gt;%
  group_by(id, month, competition) %&amp;gt;%
  summarise(goals = n()) %&amp;gt;%
  left_join(.,
            player_goals %&amp;gt;%
              select(id, name) %&amp;gt;%
              unique(),
            by = &amp;quot;id&amp;quot;)

#too many competititon for legend
#sort out into broad groups
competition_types &amp;lt;- data.frame(competition = circular_data$competition) %&amp;gt;%
  unique() %&amp;gt;%
  mutate(competition = as.character(competition)) %&amp;gt;%
  mutate(competition_type = case_when(
    grepl(&amp;quot;MLS&amp;quot;, competition) ~ &amp;quot;Domestic&amp;quot;,
    grepl(&amp;quot;World Cup qualification| Qualifiers&amp;quot;, competition) ~ &amp;quot;International&amp;quot;,
    grepl(&amp;quot;Friendlies&amp;quot;, competition) ~ &amp;quot;International Friendlies&amp;quot;,
    grepl(&amp;quot;World Cup [0-9]{4}|Confederations|EURO [0-9]{4}&amp;quot;, competition) ~ &amp;quot;International Tournament&amp;quot;,
    grepl(&amp;quot;UEFA|Champions League|UI Cup|Cup Winners|European Cup|Europa&amp;quot;, competition) ~ &amp;quot;European&amp;quot;,
    grepl(&amp;quot;Club World&amp;quot;, competition) ~ &amp;quot;International Club&amp;quot;,
    grepl(&amp;quot;Cup|cup|Pokal|copa|Copa|beker|Coupe|coppa|Kupasi|Trophée|Kupa&amp;quot;, competition) ~ &amp;quot;Domestic Cup&amp;quot;
  )) %&amp;gt;%
  mutate(competition_type = ifelse(is.na(competition_type), &amp;quot;Domestic&amp;quot;, competition_type)) %&amp;gt;%
  #convert to factor for plot fill order
  mutate(competition_type = fct_rev(factor(competition_type)))

#plot as circular radar plots
circular_data %&amp;gt;%
  left_join(., competition_types, by = &amp;quot;competition&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = month, y = goals, fill = competition_type)) +
  #convert to polar coordinates
  coord_polar(theta = &amp;quot;x&amp;quot;, start = -.13) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  scale_fill_discrete(name = &amp;quot;Competition Type&amp;quot;) +
  ggtitle(&amp;quot;Goals Per Month for Top 16 Unique Day Scorers&amp;quot;) +
  facet_wrap(~name) +
  theme_minimal() +
  theme(axis.text = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-05-The_Knowledge_3_files/figure-html/plot_circular-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One nice thing that pops out is how Kirsten rarely scored in December/January- probably due to the Bundesliga mid season break.&lt;/p&gt;
&lt;p&gt;I also found it interesting that &lt;a href=&#34;https://en.wikipedia.org/wiki/Dirk_Kuyt&#34;&gt;Dirk Kuyt&lt;/a&gt; featured in the top 16, despite not being renowned as a great goalscorer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#count total goals per player
left_join(
  days_per_player,
  player_goals %&amp;gt;%
    group_by(id) %&amp;gt;%
    summarise(goals = n()),
  by = &amp;quot;id&amp;quot;
) %&amp;gt;%
  #work out days/total goals
  mutate(proportion_unique = days / goals) %&amp;gt;%
  arrange(-days) %&amp;gt;%
  filter(days &amp;gt; 150) %&amp;gt;%
  select(name, goals, days, proportion_unique) %&amp;gt;%
  arrange(-proportion_unique)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34 x 4
##    name      goals  days proportion_unique
##    &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;             &amp;lt;dbl&amp;gt;
##  1 Gilardino   231   154             0.667
##  2 Cissé       269   166             0.617
##  3 Signori     260   160             0.615
##  4 Di Vaio     269   165             0.613
##  5 Toni        273   165             0.604
##  6 Kuyt        281   169             0.601
##  7 Lampard     258   154             0.597
##  8 Frei        257   153             0.595
##  9 Drogba      300   173             0.577
## 10 Trézéguet   265   152             0.574
## # ... with 24 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When sorted by how evenly their goals/date coverage is (i.e. the ideal ratio would be 1 goal on every day), Dirk Kuyt pops up again (and did in fact score many more goals than I had assumed). &lt;a href=&#34;https://en.wikipedia.org/wiki/Alberto_Gilardino&#34;&gt;Alberto Gilardino&lt;/a&gt; really stands out as a player who has maximum date coverage despite (relative to other members of the list!) a low number of total goals scored.&lt;/p&gt;
&lt;p&gt;I’m not sure what, if any, insight that adds but is a cool piece of trivia.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;first-losers&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;First Losers&lt;/h1&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
Which club holds the record for most 2nd place finishes in the English top flight?
&lt;/p&gt;
— Tom Goddard (&lt;span class=&#34;citation&#34;&gt;@Tom_Goddard_13&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/Tom_Goddard_13/status/1092785174046228480?ref_src=twsrc%5Etfw&#34;&gt;February 5, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;answer-manchester-united-in-the-top-flight---14-times&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answer: Manchester United in the top flight - 14 times&lt;/h3&gt;
&lt;p&gt;The fist question this week where I get to dive back into &lt;a href=&#34;https://github.com/jalapic/engsoccerdata&#34;&gt;James Curley’s engsoccerdata package&lt;/a&gt; asks which teams have finished second in their league the most.&lt;/p&gt;
&lt;p&gt;First lets load up the engsoccerdata for English leagues 1882-2016. I’ve munged it in a pretty verbose way; there’s definitely a faster way to do it but that’s not really necessary. All we need are the indicators used to sort the league (points, goal difference, and goal scored) for every match in a long format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eng_data &amp;lt;- engsoccerdata::england %&amp;gt;%
  #select only pertinent variables
  select(Date, Season, home, visitor, hgoal, vgoal, division) %&amp;gt;%
  rename_all(tolower) %&amp;gt;%
  #melt the data to long format
  reshape2::melt(id.vars = c(&amp;quot;date&amp;quot;, &amp;quot;season&amp;quot;, &amp;quot;hgoal&amp;quot;, &amp;quot;vgoal&amp;quot;, &amp;quot;division&amp;quot;),
                 value.name = &amp;quot;team&amp;quot;, variable.name = &amp;quot;location&amp;quot;) %&amp;gt;%
  #this can be done in one step but for sanity
  mutate(result = case_when(
    hgoal &amp;gt; vgoal &amp;amp; location == &amp;quot;home&amp;quot; ~ &amp;quot;W&amp;quot;,
    vgoal &amp;gt; hgoal &amp;amp; location == &amp;quot;visitor&amp;quot; ~ &amp;quot;W&amp;quot;,
    hgoal &amp;lt; vgoal &amp;amp; location == &amp;quot;home&amp;quot; ~ &amp;quot;L&amp;quot;,
    vgoal &amp;lt; hgoal &amp;amp; location == &amp;quot;visitor&amp;quot; ~ &amp;quot;L&amp;quot;,
    vgoal == hgoal ~ &amp;quot;D&amp;quot;
  )) %&amp;gt;%
  #points for a win changed in 1981
  mutate(points = case_when(
    result == &amp;quot;L&amp;quot; ~ 0,
    result == &amp;quot;D&amp;quot; ~ 1,
    result == &amp;quot;W&amp;quot; &amp;amp; season &amp;lt; 1981 ~ 2,
    result == &amp;quot;W&amp;quot; &amp;amp; season &amp;gt; 1980 ~ 3
  )) %&amp;gt;%
  #and get the goal info too
  mutate(goal_diff = case_when(
    location == &amp;quot;home&amp;quot; ~ hgoal - vgoal,
    location == &amp;quot;visitor&amp;quot; ~ vgoal - hgoal
  )) %&amp;gt;%
  mutate(goals = case_when(
    location == &amp;quot;home&amp;quot; ~ hgoal,
    location == &amp;quot;visitor&amp;quot; ~ vgoal
  )) %&amp;gt;%
  #only save the variables we care about then sort
  select(date, season, division, team, points, goals, goal_diff) %&amp;gt;%
  arrange(date, team)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then find the final positions of each team in each season of English football sorted by points, goal difference and goals for&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_positions &amp;lt;- eng_data %&amp;gt;%
  setDT() %&amp;gt;%
  #find the match number
  .[, match := 1:.N, by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  #find the cumulative points, goal difference and goals for
  .[, season_points := cumsum(points), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, season_gd := cumsum(goal_diff), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, season_g := cumsum(goals), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  #filter out the final matches totals and order
  .[.[, .I[match == max(match)], by= c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;)]$V1] %&amp;gt;%
  .[order(season, division, -season_points)] %&amp;gt;%
  #assign the final positions
  .[, final_position := 1:.N, by = c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;)] %&amp;gt;%
  .[, c(&amp;quot;team&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;final_position&amp;quot;)] %&amp;gt;%
  #count by final position
  .[, pos_count := .N, by = c(&amp;quot;team&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;final_position&amp;quot;)] %&amp;gt;%
  unique()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can filter out those who have finished second most&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;second_place &amp;lt;- final_positions %&amp;gt;%
  #filter out second place finishes
  .[final_position == 2] %&amp;gt;%
  .[, c(&amp;quot;team&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;final_position&amp;quot;, &amp;quot;pos_count&amp;quot;)] %&amp;gt;%
  .[order(-pos_count)]

head(data.frame(second_place), 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 team division final_position pos_count
## 1  Manchester United        1              2        14
## 2            Arsenal        1              2        12
## 3          Liverpool        1              2        11
## 4        Aston Villa        1              2         9
## 5   Sheffield United        2              2         8
## 6    Birmingham City        2              2         8
## 7            Everton        1              2         7
## 8         Sunderland        1              2         7
## 9  Preston North End        1              2         6
## 10   Manchester City        1              2         6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps unsurprisingly, most of the teams to finish second have finished second in the top flight. Manchester United lead the way with Arsenal and Liverpool following up.&lt;/p&gt;
&lt;p&gt;Bristol City, Charlton Athletic, Oldham Athletic, Blackpool, QPR, Watford and Southampton have finished runners up in the top division without winning it, all having achieved this exactly once.&lt;/p&gt;
&lt;p&gt;Plymouth Argyle have perhaps the most heartbreaking run of all though- having finished second in the old 3rd Division South &lt;a href=&#34;https://en.wikipedia.org/wiki/Plymouth_Argyle_F.C.#Honours&#34;&gt;SIX times in a row between 1922-1927&lt;/a&gt; before finally winning it in 1929.&lt;/p&gt;
&lt;p&gt;I thought I might as well also plot every teams league finishes as a proportion of their season in the league. Position here refers to total overall position (so 1st in Division two might be 21st overall). The darker the colour, the more likely the team was the end the season in that position. All teams have been sorted by their mean final league position.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eng_data %&amp;gt;%
  #filter out modern era
  filter(season &amp;gt; 1991) %&amp;gt;%
  setDT() %&amp;gt;%
  #find finish positions and count as above
  .[, match := 1:.N, by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, season_points := cumsum(points), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, season_gd := cumsum(goal_diff), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, season_g := cumsum(goals), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[.[, .I[match == max(match)], by= c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;)]$V1] %&amp;gt;%
  .[order(season, division, -season_points)] %&amp;gt;%
  .[, final_position := 1:.N, by = c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;)] %&amp;gt;%
  .[, total_position := 1:.N, by = c(&amp;quot;season&amp;quot;)] %&amp;gt;%
  .[, c(&amp;quot;team&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;final_position&amp;quot;, &amp;quot;total_position&amp;quot;)] %&amp;gt;%
  .[, pos_count := .N, by = c(&amp;quot;team&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;final_position&amp;quot;)] %&amp;gt;%
  .[, team_appearances := .N, by = c(&amp;quot;team&amp;quot;)] %&amp;gt;%
  .[, mean_pos := sum(total_position)/team_appearances, by = c(&amp;quot;team&amp;quot;)] %&amp;gt;%
  unique() %&amp;gt;%
  #order by mean position
  .[order(mean_pos)] %&amp;gt;%
  .[, team := fct_rev(fct_relevel(as.factor(team), unique(.$team)))] %&amp;gt;%
  #plot
  ggplot(., aes(x = total_position, y = team)) + 
  geom_tile(aes(alpha = pos_count/team_appearances), fill = &amp;quot;blue&amp;quot;) +
  scale_alpha_continuous(guide = FALSE) +
  ggtitle(&amp;quot;Teams Ordered by Mean Final Position 1992-2016&amp;quot;,
          subtitle = &amp;quot;Weight indicates proportion of finishes in that position&amp;quot;) +
  xlab(&amp;quot;Total League Position&amp;quot;) +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 10))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-05-The_Knowledge_3_files/figure-html/all_final_positions-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There’s probably too much data to graph here, but it’s still a fun way to look at 140 years of English football&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slip-slidin-away&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Slip Slidin’ Away&lt;/h1&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
As we&#39;re starting to reach that time of season (we&#39;ll, we are at &lt;a href=&#34;https://twitter.com/hashtag/itfc?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#itfc&lt;/a&gt;)… What&#39;s the earliest &lt;em&gt;collectively&lt;/em&gt; a team from each of the top 4 English leagues has been relegated?
&lt;/p&gt;
— Philip Genochio (&lt;span class=&#34;citation&#34;&gt;@philipgenochio&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/philipgenochio/status/1092782376852156416?ref_src=twsrc%5Etfw&#34;&gt;February 5, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;answer-rochdale-with-8-games-to-go-in-division-3-in-19731974&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answer: Rochdale with 8 games to go in Division 3 in 1973/1974&lt;/h3&gt;
&lt;p&gt;A similar question involves the earliest teams to get relegated. Obviously for this first we need to know how many teams are relegated from each league per season. Having only really started watching football around the turn of the millenium I was a bit surprised how much this has changed over the years (n.b. I’m only counting automatic relegation- playoffs and re-elections don’t count).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#manually enter the number of relegation spots per league
relegation_spots &amp;lt;- eng_data %&amp;gt;%
  .[, c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;)] %&amp;gt;%
  unique() %&amp;gt;%
  mutate(relegation_spots = case_when(
    season &amp;gt;= 1995 &amp;amp; division == 1 ~ 3,
    season &amp;gt;= 1994 &amp;amp; division == 1 ~ 4,
    season &amp;gt;= 1991 &amp;amp; division == 1 ~ 3,
    season &amp;gt;= 1990 &amp;amp; division == 1 ~ 2,
    season &amp;gt;= 1973 &amp;amp; division == 1 ~ 3,
    season &amp;gt;= 1898 &amp;amp; division == 1 ~ 2,
    season &amp;gt;= 1995 &amp;amp; division == 2 ~ 3,
    season &amp;gt;= 1994 &amp;amp; division == 2 ~ 4,
    season &amp;gt;= 1991 &amp;amp; division == 2 ~ 3,
    season &amp;gt;= 1990 &amp;amp; division == 2 ~ 2,
    season &amp;gt;= 1988 &amp;amp; division == 2 ~ 3,
    season &amp;gt;= 1986 &amp;amp; division == 2 ~ 2,
    season &amp;gt;= 1973 &amp;amp; division == 2 ~ 3,
    season &amp;gt;= 1921 &amp;amp; division == 2 ~ 2,
    season &amp;gt;= 1920 &amp;amp; division == 2 ~ 1,
    season &amp;gt;= 1919 &amp;amp; division == 2 ~ 3,
    season &amp;gt;= 1995 &amp;amp; division == 3 ~ 4,
    season &amp;gt;= 1994 &amp;amp; division == 3 ~ 5,
    season &amp;gt;= 1991 &amp;amp; division == 3 ~ 4,
    season &amp;gt;= 1990 &amp;amp; division == 3 ~ 3,
    season &amp;gt;= 1988 &amp;amp; division == 3 ~ 4,
    season &amp;gt;= 1986 &amp;amp; division == 3 ~ 3,
    season &amp;gt;= 1958 &amp;amp; division == 3 ~ 4,
    season &amp;gt;= 2002 &amp;amp; division == 4 ~ 2,
    season &amp;gt;= 1996 &amp;amp; division == 4 ~ 1,
    season &amp;gt;= 1993 &amp;amp; division == 4 ~ 0,
    season &amp;gt;= 1992 &amp;amp; division == 4 ~ 1,
    season &amp;gt;= 1990 &amp;amp; division == 4 ~ 0,
    season &amp;gt;= 1986 &amp;amp; division == 4 ~ 1
 )) %&amp;gt;%
  mutate(relegation_spots = ifelse(relegation_spots == 0, NA, relegation_spots))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then need to work out how many points each team has, and how many they could possibly achieve, after every match in a season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_positions &amp;lt;- eng_data %&amp;gt;%
    setDT() %&amp;gt;%
  #get the match number
  .[, match := 1:.N, by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  #get the current points for the team
  .[, season_points := cumsum(points), by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;)] %&amp;gt;%
  .[order(division, season, match, -season_points)] %&amp;gt;%
  #get the current position for the team
  .[, position := 1:.N, by = c(&amp;quot;division&amp;quot;, &amp;quot;season&amp;quot;, &amp;quot;match&amp;quot;)] %&amp;gt;%
  #how many teams are in the league
  .[, teams := max(position), by = c(&amp;quot;division&amp;quot;, &amp;quot;season&amp;quot;)] %&amp;gt;%
  #find how many matches each team has left to play
  .[, matches_remaining := max(match) - match, by = c(&amp;quot;division&amp;quot;, &amp;quot;season&amp;quot;)] %&amp;gt;%
  #the max points assumes each team wins all of their remaining matches
  .[season &amp;lt; 1981, possible_points := season_points + (matches_remaining * 2)] %&amp;gt;%
  .[season &amp;gt; 1980, possible_points := season_points + (matches_remaining * 3)] %&amp;gt;%
  #merge in the relegation spots and find what position each team needs to be safe
  merge(., relegation_spots, by = c(&amp;quot;division&amp;quot;, &amp;quot;season&amp;quot;)) %&amp;gt;%
  .[, lowest_safe_position := teams - relegation_spots] %&amp;gt;%
  #the threshold for safety is the number of points the lowest safe team has
  .[position == lowest_safe_position, lowest_safe_points := season_points]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then it’s a simple case of finding teams in the relegation zone and finding the point at which they can no longer catch the lowest safe team&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;relegation_secured &amp;lt;- possible_positions %&amp;gt;%
  #filter out teams in relegation trouble
  .[!is.na(lowest_safe_position)] %&amp;gt;%
  .[position &amp;gt;= lowest_safe_position] %&amp;gt;%
  .[, lowest_safe_points := na.locf(lowest_safe_points)] %&amp;gt;%
  .[possible_points &amp;lt; lowest_safe_points] %&amp;gt;%
    .[, c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;team&amp;quot;, &amp;quot;season_points&amp;quot;,
          &amp;quot;matches_remaining&amp;quot;)] %&amp;gt;%
  .[order(-matches_remaining)] %&amp;gt;%
  #remove duplicates
  .[!duplicated(paste0(season, division, team))]

head(data.frame(relegation_secured), 15)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    season division                team season_points matches_remaining
## 1    1973        3            Rochdale            16                 8
## 2    1984        1          Stoke City            17                 7
## 3    2001        2    Stockport County            17                 7
## 4    2003        2           Wimbledon            21                 7
## 5    2016        2    Rotherham United            17                 7
## 6    1961        3      Newport County            18                 7
## 7    1984        3    Cambridge United            17                 7
## 8    1993        3              Barnet            23                 7
## 9    2000        3       Oxford United            22                 7
## 10   1930        1   Manchester United            16                 6
## 11   1954        1 Sheffield Wednesday            19                 6
## 12   1975        1    Sheffield United            13                 6
## 13   1994        1        Ipswich Town            23                 6
## 14   2007        1        Derby County            11                 6
## 15   1952        2            Barnsley            17                 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So Rochdale hold the questionable honour of being the team knowing they are doomed with the most matches to go (with 8 in division 3 in 1973). There’s quite a large chasing pack of teams who have known with 7 or 6 matches left too. Ipswich are currently ‘only’ 8 points off of safety with 16 games left to go so seems unlikely to beat 8 but it could be close…&lt;/p&gt;
&lt;p&gt;I also wanted to see what the earliest a team has ever been certain of their final position is.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;certain_final_positions &amp;lt;- possible_positions %&amp;gt;%
  #find the possible points for the teams above and below each team
  .[, poss_points_nextworst := lead(possible_points), by = c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;match&amp;quot;)] %&amp;gt;%
  .[, points_nextbest := lag(season_points), by = c(&amp;quot;season&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;match&amp;quot;)] %&amp;gt;%
  #filter out teams that cannot beat/fall below the next best/worst teams
  .[(is.na(poss_points_nextworst) | season_points &amp;gt; poss_points_nextworst) &amp;amp; 
      (is.na(points_nextbest) | possible_points &amp;lt; points_nextbest) &amp;amp;
      matches_remaining &amp;gt; 0] %&amp;gt;%
  #order and select columns
  .[order(-matches_remaining)] %&amp;gt;%
  .[, c(&amp;quot;division&amp;quot;, &amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;, &amp;quot;position&amp;quot;, &amp;quot;matches_remaining&amp;quot;, &amp;quot;teams&amp;quot;)]

head(data.frame(certain_final_positions), 15)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    division season                 team position matches_remaining teams
## 1         4   1968 Bradford Park Avenue       24                 7    24
## 2         1   1984           Stoke City       22                 6    22
## 3         2   1949    Tottenham Hotspur        1                 6    22
## 4         2   1971              Watford       22                 6    22
## 5         2   1973        Middlesbrough        1                 6    22
## 6         2   2001     Stockport County       24                 6    24
## 7         3   1966  Queens Park Rangers        1                 6    24
## 8         3   1984     Cambridge United       24                 6    24
## 9        3b   1952              Walsall       24                 6    24
## 10        4   1968 Bradford Park Avenue       24                 6    24
## 11        4   1977              Watford        1                 6    24
## 12        4   1997         Notts County        1                 6    24
## 13        1   1980       Crystal Palace       22                 5    22
## 14        1   1982            Liverpool        1                 5    22
## 15        1   1984              Everton        1                 5    22&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spare a thought for fans of Bradford Park Avenue in 1968-1969 who knew their team would finish bottom of the 3rd Division North with 7 matches (of 46) remaining. Luckily they weren’t relegated as they were already in the bottom division of the football league and we re-elected for the next season. They repeated this feat, now in Division 4, 5 years later, finishing bottom with 6 games to go.&lt;/p&gt;
&lt;p&gt;Most of these involve teams either winning or finishing bottom of their league. If we filter these out we’re left with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;certain_final_positions %&amp;gt;%
  #filter off bottom or top teams
  .[position != 1 &amp;amp; position != teams] %&amp;gt;%
  data.frame() %&amp;gt;%
  head(., 15)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    division season                team position matches_remaining teams
## 1        3a   1931        New Brighton       20                 4    22
## 2        3a   1931            Rochdale       21                 4    22
## 3         2   2003       Bradford City       23                 3    24
## 4         2   2005    Sheffield United        2                 3    24
## 5        3a   1931        New Brighton       20                 3    22
## 6        3a   1931            Rochdale       21                 3    22
## 7        3b   1929           Brentford        2                 3    22
## 8         4   1975    Northampton Town        2                 3    24
## 9         1   1888         Aston Villa        2                 2    12
## 10        1   1930         Aston Villa        2                 2    22
## 11        1   1934          Sunderland        2                 2    22
## 12        1   1946           Brentford       21                 2    22
## 13        1   1957   Preston North End        2                 2    22
## 14        1   1970             Burnley       21                 2    22
## 15        1   1978 Queens Park Rangers       20                 2    22&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which really emphasizes how only exceptionally good/bad teams are ever really certain of their position before the end of the season.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;draw-me-like-one-of-your-top-flight-teams&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Draw Me Like One of Your Top Flight Teams&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theguardian.com/football/2019/feb/06/what-are-the-lowest-xg-scoring-football-matches-in-history-expected-goals-the-knowledge-football&#34;&gt;““Tottenham have currently played 29 consecutive Premier League games without drawing one,” notes Wouter van Dael. “What is the longest ever such league run?””&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;answer-aston-villa---50-games-in-18911892-but-otherwise-spurs-in-modern-football&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answer: Aston Villa - 50 games in 1891/1892, but otherwise Spurs in modern football&lt;/h3&gt;
&lt;p&gt;(N.b. the engsoccerdata package only has data up until the 2016/2017 season, so Tottenham’s run won’t appear in the results below)&lt;/p&gt;
&lt;p&gt;To do this we just need to select every game with a non-zero goal difference (i.e. a draw) and then find consecutive runs for teams.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;draws &amp;lt;- eng_data %&amp;gt;%
  setDT() %&amp;gt;%
  .[order(team, date)] %&amp;gt;%
  #give each match a consecutive &amp;#39;id&amp;#39;
  .[, game_id := 1:.N, by = team] %&amp;gt;%
  #find matches with a non zero goal difference (not a draw)
  .[goal_diff != 0] %&amp;gt;%
  #find consecutive matches with non zero goal difference
  .[, consecutive := lead(game_id) - game_id, by = team] %&amp;gt;%
  .[consecutive != 1, consecutive := NA] %&amp;gt;%
  #count all consecutive runs
  .[, count := .N*!is.na(consecutive), rleid(!is.na(consecutive))] %&amp;gt;%
  #find the start and end of each run
  .[count != lead(count) | count != lag(count)] %&amp;gt;%
  .[order(-count, team, date)] %&amp;gt;%
  #set the start points and end point and spread to separate columns
  .[, run_point := c(&amp;quot;start&amp;quot;, &amp;quot;end&amp;quot;)] %&amp;gt;%
  spread(run_point, date) %&amp;gt;%
  .[, start := na.locf(start)] %&amp;gt;%
  .[!is.na(end) &amp;amp; !is.na(start)] %&amp;gt;%
  #select columns to print
  .[, c(&amp;quot;start&amp;quot;, &amp;quot;end&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;team&amp;quot;, &amp;quot;count&amp;quot;)] %&amp;gt;%
  .[order(-count)]

head(data.frame(draws), 25)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         start        end division                    team count
## 1  1891-01-01 1892-12-10        1             Aston Villa    50
## 2  1895-03-30 1896-11-09        1              Stoke City    45
## 3  1907-12-26 1909-02-27        1              Sunderland    45
## 4  1913-01-01 1914-02-14        2    Bradford Park Avenue    43
## 5  1909-01-30 1910-03-25        2          Leicester City    43
## 6  1894-01-06 1896-09-05        2                 Walsall    43
## 7  1892-12-10 1894-09-15        1         Birmingham City    42
## 8  1896-03-21 1897-09-25        2                  Darwen    39
## 9  1928-03-17 1929-02-02        1              Portsmouth    37
## 10 1904-10-22 1905-11-11        1        Sheffield United    37
## 11 1947-11-15 1948-09-25       3b          Bristol Rovers    36
## 12 1930-05-03 1931-03-28        2 Wolverhampton Wanderers    36
## 13 1894-03-23 1895-04-20        2            Lincoln City    35
## 14 1946-10-12 1947-08-23       3a        Stockport County    35
## 15 1904-01-30 1904-12-27        2            Bristol City    34
## 16 1915-04-03 1920-02-21        1    West Bromwich Albion    34
## 17 1934-12-01 1935-09-16        2        Doncaster Rovers    33
## 18 1895-11-16 1896-11-28        2        Newcastle United    33
## 19 1925-05-02 1926-02-22        2           Middlesbrough    32
## 20 1935-08-31 1936-03-14       3b                 Reading    32
## 21 1925-12-26 1926-10-02       3a                Rochdale    32
## 22 1896-01-20 1897-02-13        2        Burton Wanderers    31
## 23 1927-12-24 1928-09-15       3a      Accrington Stanley    30
## 24 1905-11-04 1906-09-03        2    Gainsborough Trinity    30
## 25 1946-11-23 1947-08-25        2         Plymouth Argyle    30&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tottenham’s run without a draw doesn’t even make the top 25 such runs! And they still would have to wait until at least next season until they can match Aston Villa’s run from New Years Day 1891 until Christmas Eve in 1892, a run of 50 matches without a draw- a run that included 23 losses, and 27 wins. It is the longest for quite sometime though- there’s few similar runs in the post-war years.&lt;/p&gt;
&lt;p&gt;We can restrict this easily to just runs in the top division my modifying one line&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;draws &amp;lt;- eng_data %&amp;gt;%
  setDT() %&amp;gt;%
  .[order(team, date)] %&amp;gt;%
  .[, game_id := 1:.N, by = team] %&amp;gt;%
  #filter out only the top division matches
  .[division == 1] %&amp;gt;%
  .[goal_diff != 0] %&amp;gt;%
  .[, consecutive := lead(game_id) - game_id, by = team] %&amp;gt;%
  .[consecutive != 1, consecutive := NA] %&amp;gt;%
  .[, count := .N*!is.na(consecutive), rleid(!is.na(consecutive))] %&amp;gt;%
  .[count != lead(count) | count != lag(count)] %&amp;gt;%
  .[order(-count, team, date)] %&amp;gt;%
  .[, run_point := c(&amp;quot;start&amp;quot;, &amp;quot;end&amp;quot;)] %&amp;gt;%
  spread(run_point, date) %&amp;gt;%
  .[, start := na.locf(start)] %&amp;gt;%
  .[!is.na(end) &amp;amp; !is.na(start)] %&amp;gt;%
  .[, c(&amp;quot;start&amp;quot;, &amp;quot;end&amp;quot;, &amp;quot;division&amp;quot;, &amp;quot;team&amp;quot;, &amp;quot;count&amp;quot;)] %&amp;gt;%
  .[order(-count)]

head(data.frame(draws), 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         start        end division                    team count
## 1  1891-01-01 1892-12-10        1             Aston Villa    50
## 2  1895-03-30 1896-11-09        1              Stoke City    45
## 3  1907-12-26 1909-02-27        1              Sunderland    45
## 4  1928-03-17 1929-02-02        1              Portsmouth    37
## 5  1904-10-22 1905-11-11        1        Sheffield United    37
## 6  1915-04-03 1920-02-21        1    West Bromwich Albion    34
## 7  1895-09-28 1896-09-12        1 Wolverhampton Wanderers    29
## 8  1964-09-12 1965-03-31        1             Aston Villa    28
## 9  1953-04-25 1954-01-02        1                 Burnley    28
## 10 1891-03-14 1892-04-30        1              Sunderland    28&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where we can see that Spurs’ run is at least the longest modern top flight drawless run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Which English County Has Won the Most Points</title>
      <link>/post/counties_league_points/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/counties_league_points/</guid>
      <description>


&lt;p&gt;Every so often a question on The Guardian’s &lt;a href=&#34;https://www.theguardian.com/football/series/theknowledge&#34;&gt;The Knowledge&lt;/a&gt; football trivia section piques my interest and is amenable to analysis using R. Previously, I looked at &lt;a href=&#34;http://www.robert-hickman.eu/post/the-knowledge-4th-august-2018/&#34;&gt;club name suffixes and young World Cup winners&lt;/a&gt; last August. This week (give or take), a question posed on twitter caught my attention:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
&lt;a href=&#34;https://twitter.com/TheKnowledge_GU?ref_src=twsrc%5Etfw&#34;&gt;&lt;span class=&#34;citation&#34;&gt;@TheKnowledge_GU&lt;/span&gt;&lt;/a&gt; was just chatting to some colleagues in the kitchen at work about why Essex doesn&#39;t have many big football clubs and it got me thinking. If you combined all the points from every league team in the ceremonial counties in England, which county would be on top?
&lt;/p&gt;
— BoxBoron (&lt;span class=&#34;citation&#34;&gt;@Rutland_Walker&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/Rutland_Walker/status/1082641231853899781?ref_src=twsrc%5Etfw&#34;&gt;January 8, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;To start with as always load the libraries needed to analyse this&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get data
library(engsoccerdata)
library(rvest)
#munging
library(tidyverse)
library(magrittr)
#spatial analysis
library(sf)
library(rgdal)
#for plotting maps
library(ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The easiest way to get a total of points is using the engsoccerdata:: packages database of every English football match from the top four divisions (this does not include data from the 2017-2018, or 2018-2019 seasons). We can work out the points easily from the goals scored for each team&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load the data
match_data &amp;lt;- engsoccerdata::england %&amp;gt;%
  #select only the necessary columns and melt
  select(season = Season, home, visitor, hgoal, vgoal, tier) %&amp;gt;%
  reshape2::melt(id.vars = c(&amp;quot;season&amp;quot;, &amp;quot;hgoal&amp;quot;, &amp;quot;vgoal&amp;quot;, &amp;quot;tier&amp;quot;),
                 variable.name = &amp;quot;location&amp;quot;,
                 value.name = &amp;quot;team&amp;quot;) %&amp;gt;%
  #will need to match this to location data so some club names need cleaning
  mutate(team_subbed = case_when(
    team == &amp;quot;Yeovil&amp;quot; ~ &amp;quot;Yeovil Town&amp;quot;,
    team == &amp;quot;AFC Bournemouth&amp;quot; ~ &amp;quot;A.F.C. Bournemouth&amp;quot;,
    team == &amp;quot;Halifax Town&amp;quot; ~ &amp;quot;F.C. Halifax Town&amp;quot;,
    team == &amp;quot;Aldershot&amp;quot; ~ &amp;quot;Aldershot Town F.C&amp;quot;,
    team == &amp;quot;Wimbledon&amp;quot; ~ &amp;quot;A.F.C. Wimbledon&amp;quot;,
    team == &amp;quot;AFC Wimbledon&amp;quot; ~ &amp;quot;A.F.C. Wimbledon&amp;quot;,
    team == &amp;quot;Macclesfield&amp;quot; ~ &amp;quot;Macclesfield Town&amp;quot;,
    team == &amp;quot;Rushden &amp;amp; Diamonds&amp;quot; ~ &amp;quot;A.F.C. Rushden &amp;amp; Diamonds&amp;quot;,
    team == &amp;quot;Milton Keynes Dons&amp;quot; ~ &amp;quot;Milton Keynes&amp;quot;,
    team == &amp;quot;Dagenham and Redbridge&amp;quot; ~ &amp;quot;Dagenham &amp;amp; Redbridge&amp;quot;,
    team == &amp;quot;Stevenage Borough&amp;quot; ~ &amp;quot;Stevenage&amp;quot;
  )) %&amp;gt;%
  #if cleaning isnt required, take original
  mutate(team_subbed = ifelse(is.na(team_subbed), team, team_subbed))

#peek at the data
head(match_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   season hgoal vgoal tier location            team     team_subbed
## 1   1888     1     1    1     home Accrington F.C. Accrington F.C.
## 2   1888     0     2    1     home Accrington F.C. Accrington F.C.
## 3   1888     2     3    1     home Accrington F.C. Accrington F.C.
## 4   1888     5     1    1     home Accrington F.C. Accrington F.C.
## 5   1888     6     2    1     home Accrington F.C. Accrington F.C.
## 6   1888     3     1    1     home Accrington F.C. Accrington F.C.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 388k (194k matches) data.frame seems daunting, but actually only results in many fewer unique teams that have played at least one match in the top 4 divisions in England&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(unique(match_data$team_subbed))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 141&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The location of each club can then be found using the wikipedia pages for them/their stadia. This matches 121 of the 141 clubs pretty nicely which is a fairly good percentage all things considered&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#find the links to each clubs wikipedia page
wiki &amp;lt;- read_html(&amp;quot;https://en.wikipedia.org/wiki/List_of_football_clubs_in_England&amp;quot;) %&amp;gt;%
  html_nodes(&amp;quot;td:nth-child(1)&amp;quot;) %&amp;gt;%
  .[which(grepl(&amp;quot;href&amp;quot;, .))]

#get the names for each club
wiki_clubs &amp;lt;- wiki %&amp;gt;% html_text() %&amp;gt;% gsub(&amp;quot; \\(.*\\)$&amp;quot;, &amp;quot;&amp;quot;, .)

#can match 121/141 right off the bat
(unique(match_data$team_subbed) %in% wiki_clubs) %&amp;gt;%
  which() %&amp;gt;%
  length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 121&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can find the location of these matching clubs by finding the page for their stadia and then finding the coordinates. It’s a bit of a messy function because I was just jamming stuff together to get data out as best as possible. This takes ~1 minute to run through all 121 teams (for the blog post I actually saved an RDS of the output from this and load it just to save time/server calls)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matching_club_locations &amp;lt;- wiki %&amp;gt;% 
  #take only the matching clubs
  .[which(wiki_clubs %in% unique(match_data$team_subbed))] %&amp;gt;%
  html_nodes(&amp;quot;a&amp;quot;) %&amp;gt;%
  #get the wiki page link
  html_attr(&amp;quot;href&amp;quot;) %&amp;gt;%
  paste0(&amp;quot;https://en.wikipedia.org&amp;quot;, .) %&amp;gt;%
  #for each club page find the stadium and its coordinates
  lapply(., function(team) {
    link &amp;lt;- read_html(team) %&amp;gt;%
      html_nodes(&amp;quot;.label a&amp;quot;) %&amp;gt;%
      .[1] %&amp;gt;%
      html_attr(&amp;quot;href&amp;quot;) %&amp;gt;% 
      paste0(&amp;quot;https://en.wikipedia.org&amp;quot;,. )
    coords &amp;lt;- link %&amp;gt;%
      read_html() %&amp;gt;% 
      html_nodes(&amp;quot;#coordinates a&amp;quot;) %&amp;gt;%
      html_attr(&amp;quot;href&amp;quot;) %&amp;gt;%
      .[2]
    #if coords not found use NA
    if(is.na(coords)) {
      coord_df &amp;lt;- data.frame(lat = NA,
                             lon = NA)
    } else {
      coords &amp;lt;- coords %&amp;gt;%
        paste0(&amp;quot;https:&amp;quot;, .) %&amp;gt;%
        read_html() %&amp;gt;%
        html_nodes(&amp;quot;.geo&amp;quot;) %&amp;gt;%
        html_text() %&amp;gt;%
        strsplit(., split = &amp;quot;, &amp;quot;)
      coord_df &amp;lt;- data.frame(lat = as.numeric(coords[[1]][1]),
                             lon = as.numeric(coords[[1]][2]))
    }
    return(coord_df)
  })  %&amp;gt;%
  #bind everything together
  do.call(rbind, .) %&amp;gt;%
  #add the club name as a new column
  mutate(team = wiki_clubs[
    which(wiki_clubs %in% unique(match_data$team_subbed))
    ]) %&amp;gt;%
  #filter out missing data
  filter(!is.na(lat) &amp;amp; !is.na(lon))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gives us the location of 114 of our 141 clubs. Most of the remaining ones are now-defunct clubs (e.g. Middlesbrough Ironopolis, Leeds City etc.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;missing_teams &amp;lt;- unique(match_data$team_subbed)[which(!unique(match_data$team_subbed) %in% matching_club_locations$team)]
missing_teams&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Accrington F.C.&amp;quot;           &amp;quot;Darwen&amp;quot;                   
##  [3] &amp;quot;Burton Swifts&amp;quot;             &amp;quot;Port Vale&amp;quot;                
##  [5] &amp;quot;Middlesbrough Ironopolis&amp;quot;  &amp;quot;Rotherham Town&amp;quot;           
##  [7] &amp;quot;Burton Wanderers&amp;quot;          &amp;quot;Loughborough&amp;quot;             
##  [9] &amp;quot;Blackpool&amp;quot;                 &amp;quot;New Brighton Tower&amp;quot;       
## [11] &amp;quot;Burton United&amp;quot;             &amp;quot;Leeds City&amp;quot;               
## [13] &amp;quot;Rotherham County&amp;quot;          &amp;quot;Bristol Rovers&amp;quot;           
## [15] &amp;quot;Darlington&amp;quot;                &amp;quot;Wigan Borough&amp;quot;            
## [17] &amp;quot;Aberdare Athletic&amp;quot;         &amp;quot;New Brighton&amp;quot;             
## [19] &amp;quot;Thames&amp;quot;                    &amp;quot;Aldershot Town F.C&amp;quot;       
## [21] &amp;quot;Hereford United&amp;quot;           &amp;quot;Scarborough&amp;quot;              
## [23] &amp;quot;Cheltenham&amp;quot;                &amp;quot;A.F.C. Rushden &amp;amp; Diamonds&amp;quot;
## [25] &amp;quot;Accrington&amp;quot;                &amp;quot;Crawley Town&amp;quot;             
## [27] &amp;quot;Fleetwood Town&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given it was a Saturday morning where I had nothing better to do, I simply located these clubs home grounds manually and created a data.frame for their locations. It’s not really great practice but whatever.&lt;/p&gt;
&lt;p&gt;These are then all bound together and converted to an sf spatial object with the correct projection&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add in the missing locations
missing_locations &amp;lt;- data.frame(
  lat = c(53.7646, 53.711772, 52.799, 53.049722, 54.5641, 53.42644, 52.8146,
          52.7743, 53.804722, 53.4359, 52.799, 53.7778, 53.428367, 51.48622,
          54.508425, 53.554914, 51.7127, 53.4292, 51.514431, 51.248386,
          52.060719, 54.265478, 51.906158, 52.328033, 53.7646, 51.405083, 53.9165),
  lon = c(-2.358, -2.477292, -1.6354, -2.1925, -1.2456, -1.34377, -1.6335, -1.1992,
          -3.048056, -3.0377, -1.6354, -1.5722, -1.370231, -2.583134, -1.534394,
          -2.650661, -3.4374, -3.0407, 0.034739, -0.754789, -2.717711, -0.418247,
          -2.060211, -0.5999, -2.358, -0.281944, -3.0247),
    team = as.character(missing_teams)
)

#bind together and convert to sf
all_locations &amp;lt;- rbind(matching_club_locations,
                       missing_locations) %&amp;gt;%
  st_as_sf(coords = c(&amp;quot;lon&amp;quot;, &amp;quot;lat&amp;quot;), crs = st_crs(&amp;quot;+init=epsg:4326&amp;quot;)) %T&amp;gt;%
  #make a quick plot of locations for sanity check
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-21-The_Knowledge_2_files/figure-html/bind_missing_locations-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have all the teams, we need the English historical county boundaries to group them by. I’d actually already used these for football analysis, looknig at &lt;a href=&#34;https://www.citymetric.com/horizons/football-could-independent-yorkshire-win-world-cup-3961&#34;&gt;if an independent Yorkshire could win the World Cup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Load the data (the boundary file can be download from the &lt;a href=&#34;https://www.ordnancesurvey.co.uk/business-and-government/products/boundaryline.html&#34;&gt;Ordnance Survey&lt;/a&gt;) and make a quick plot of the boundaries and teams&lt;/p&gt;
&lt;p&gt;(I also created an sf object engwal which is just the counties from England and Wales selected out for background plotting)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;C:\Users\Alaa\Desktop\geo_data\boundary\Data\Supplementary_Ceremonial&amp;quot;, layer: &amp;quot;Boundary-line-ceremonial-counties_region&amp;quot;
## with 91 features
## It has 2 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load the boundary file
counties &amp;lt;- readOGR(dsn = &amp;quot;path/to/file&amp;quot;,
                    layer = &amp;quot;county_boundaries&amp;quot;) %&amp;gt;%
  #convert to sf and project as northing/easting
  st_as_sf(., crs = st_crs(&amp;quot;+init=epsg:27700&amp;quot;)) %&amp;gt;%
  #only interested in the county name
  select(county = NAME) %&amp;gt;%
  #transform the projection to match that of the club locations
  st_transform(., crs = st_crs(&amp;quot;+init=epsg:4326&amp;quot;))

engwal &amp;lt;- counties %&amp;gt;%
  .[c(1:54, 88, 90),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make a quick plot of counties and teams
ggplot() +
  geom_sf(data = counties, fill = NA) +
  geom_sf(data = all_locations) +
  ggtitle(&amp;quot;Location of Teams to have Played Top\n 4 English Football Divisions&amp;quot;) +
  theme_minimal() +
  theme(axis.title=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-21-The_Knowledge_2_files/figure-html/plot_team_locations-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(by the way the artifacts around Bristol and the Wirral are from the OS dataset- it’s very annoying)&lt;/p&gt;
&lt;p&gt;Then we need to determine which teams are within which counties. The easiest way to do this is to use a spatial join of the team names in all_locations by which county they fall into (using st_contains from the sf package)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#bind the team names to each county
counties %&amp;lt;&amp;gt;%
  st_join(., all_locations, join = st_contains) %&amp;gt;%
  #remove counties that contain zero teams
  filter(!is.na(team)) %&amp;gt;%
  mutate(county = as.character(county))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## although coordinates are longitude/latitude, st_contains assumes that they are planar&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#quick plot of number of teams per county (missing = 0)
counties %&amp;gt;%
  group_by(county) %&amp;gt;%
  summarise(n_clubs = n()) %&amp;gt;%
  ggplot(data = .) +
  geom_sf(data = engwal) +
  geom_sf(aes(fill = n_clubs), colour = &amp;quot;black&amp;quot;) +
  scale_fill_viridis_c(option = &amp;quot;plasma&amp;quot;, name = &amp;quot;# clubs&amp;quot;) +
  ggtitle(&amp;quot;Number of Top 4 Division Playing\n Teams in each Ceremonial County&amp;quot;) +
  theme_minimal() +
  theme(axis.title=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-21-The_Knowledge_2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Which shows that most English historic counties (and a few Welsh ones due to teams like Cardiff City/ Swansea City etc.) have at least 1 team that has competed in the top 4 flights of English football at some point (those that do not are: Isle of Wight, Rutland, Surrey, Warwickshire, West Sussex and Cornwall).&lt;/p&gt;
&lt;p&gt;To finally get the total number of points won by these teams, the county data needs to be joined back onto the match data from the top. First I clean it up a bit then make the left_join by team name. Finally the number of points per match is calculated using case_when and points are grouped by county and summed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;county_match_data &amp;lt;- match_data %&amp;gt;% 
  mutate(team = team_subbed) %&amp;gt;%
  select(-team_subbed) %&amp;gt;%
  left_join(., counties, by = &amp;quot;team&amp;quot;) %&amp;gt;%
  mutate(points = case_when(
    location == &amp;quot;home&amp;quot; &amp;amp; hgoal &amp;gt; vgoal ~ 3,
    location == &amp;quot;visitor&amp;quot; &amp;amp; vgoal &amp;gt; hgoal ~ 3,
    location == &amp;quot;home&amp;quot; &amp;amp; hgoal &amp;lt; vgoal ~ 0,
    location == &amp;quot;visitor&amp;quot; &amp;amp; vgoal &amp;lt; hgoal ~ 0,
    hgoal == vgoal ~ 1
  ))

county_points &amp;lt;- county_match_data %&amp;gt;%
  group_by(county) %&amp;gt;%
  summarise(total_points = sum(points))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps unsurprisingly, the county with the most points is Greater London, with Greater Manchester following and other footballing hotspots/ large counties in the West Midlands, Lancashire and around Yorkshire in the trailing group&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(arrange(county_points, -total_points))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   county             total_points
##   &amp;lt;chr&amp;gt;                     &amp;lt;dbl&amp;gt;
## 1 Greater London            67189
## 2 Greater Manchester        47203
## 3 West Midlands             37413
## 4 Lancashire                30808
## 5 South Yorkshire           30061
## 6 West Yorkshire            24947&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By contrast, Worcestshire and Northumberland barely have any points, with a few Welsh counties also struggling&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(arrange(county_points, total_points))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   county          total_points
##   &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 Worcestershire           275
## 2 Northumberland           398
## 3 Mid Glamorgan            744
## 4 Somerset                 813
## 5 Gloucestershire          994
## 6 Herefordshire           1739&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we group by tier as well as county, it’s possible to see how well each county has done at specific tiers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;county_match_data %&amp;gt;%
  group_by(county, tier) %&amp;gt;%
  summarise(total_points = sum(points)) %&amp;gt;%
  left_join(.,
            select(counties, county),
            by = &amp;quot;county&amp;quot;) %&amp;gt;%
  ggplot(data = .) +
  geom_sf(data = engwal) +
  geom_sf(aes(fill = total_points), colour = &amp;quot;black&amp;quot;) +
  scale_fill_viridis_c(option = &amp;quot;plasma&amp;quot;, name = &amp;quot;total points&amp;quot;) +
  ggtitle(&amp;quot;Number of Points Won by each County\n per Tier of English Football&amp;quot;) +
  facet_wrap(~tier) +
  theme_minimal() +
  theme(axis.title=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-21-The_Knowledge_2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And for the Premier League era this clears up to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;county_match_data %&amp;gt;%
  filter(season &amp;gt; 1991) %&amp;gt;%
  group_by(county, tier) %&amp;gt;%
  summarise(total_points = sum(points)) %&amp;gt;%
  left_join(.,
            select(counties, county),
            by = &amp;quot;county&amp;quot;) %&amp;gt;%
  ggplot(data = .) +
  geom_sf(data = engwal) +
  geom_sf(aes(fill = total_points), colour = &amp;quot;black&amp;quot;, name = &amp;quot;total points&amp;quot;) +
  scale_fill_viridis_c(option = &amp;quot;plasma&amp;quot;) +
  ggtitle(&amp;quot;Number of Points Won by each County\n per Tier of English Football&amp;quot;,
          subtitle = &amp;quot;From Begining of 1992/1993 Season&amp;quot;) +
  facet_wrap(~tier) +
  theme_minimal() +
  theme(axis.title=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Ignoring unknown parameters: name&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-21-The_Knowledge_2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Which shows just how dominant London has been in the top division of English football (especially as it is only competitive at lower levels).&lt;/p&gt;
&lt;p&gt;I had wanted to weight points by the average ELO of that league and see which county has the most weight-adjusted points but got bored for this small blog post.&lt;/p&gt;
&lt;p&gt;Best,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Knowledge 4th August 2018</title>
      <link>/post/the-knowledge-4th-august-2018/</link>
      <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/the-knowledge-4th-august-2018/</guid>
      <description>


&lt;p&gt;The Guardian publish a weekly set of questions and answers on a variety of football minutiae at &lt;a href=&#34;https://www.theguardian.com/football/series/theknowledge&#34;&gt;The Knowledge&lt;/a&gt;. Forutnately, some of these are extremely tractable using R, so I thought I’d have a go at working through the archives to see if I can shed light on any of the questions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(dplyr)
library(magrittr)
library(data.table)
library(zoo)
library(ggplot2)
library(rvest)
library(stringr)

#jalapic/engsoccerdata
library(engsoccerdata)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;we-aint-going-to-the-town..&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;We Ain’t Going To The Town..&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/topes_lose/status/1023537060668473344?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1023537060668473344&amp;amp;ref_url=https%3A%2F%2Fwww.theguardian.com%2Ffootball%2F2018%2Faug%2F01%2Ffootballers-who-have-backed-out-of-a-transfer-for-another-late-in-the-day&#34;&gt;‘This season, Tranmere Rovers return to contest League Two alongside eight teams with the suffix Town, including six successive fixtures against these clubs over the New Year. What is the record for successive fixtures versus clubs with the same (or no) prefix or suffix?’&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For this question I decided to ignore prefixes as the dataset I’m using doesn’t have any that could be matches between teams except the ‘West’ in West Ham and West Bromwich Albion. That dataset is the excellent engsoccerdata from James Curley found at his github &lt;a href=&#34;https://github.com/jalapic/engsoccerdata&#34;&gt;here&lt;/a&gt; and on CRAN.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#take all of the english soccer data in the package and bind it together
england_data &amp;lt;- bind_rows(
    select(engsoccerdata::england,
           .data$home, .data$visitor, date = .data$Date),
    select(engsoccerdata::englandplayoffs,
           .data$home, .data$visitor, date = .data$Date),
    select(engsoccerdata::england1939,
           .data$home, .data$visitor, date = .data$Date)) %&amp;gt;%
  setDT() %&amp;gt;%
  #convert the date to date class
  .[, date := as.Date(date)]

#get a list of each unique team in the dataset
all_teams &amp;lt;- unique(c(as.character(england_data$home),
                      as.character(england_data$visitor)))

#melt the dataset by each teams matches
find_chains &amp;lt;- rbindlist(lapply(all_teams, function(team) {
  england_data %&amp;gt;%
    .[home == team | visitor == team] %&amp;gt;%
    .[, matching_team := team]
  })) %&amp;gt;%
  .[home == matching_team, other := visitor] %&amp;gt;%
  .[visitor == matching_team, other := home] %&amp;gt;%
  .[, c(&amp;quot;date&amp;quot;, &amp;quot;matching_team&amp;quot;, &amp;quot;other&amp;quot;)] %&amp;gt;%
  #get the suffixes and prefixes of the other team
  .[, other_prefix := gsub(&amp;quot; .*&amp;quot;, &amp;quot;&amp;quot;, other)] %&amp;gt;%
  .[, other_suffix := gsub(&amp;quot;.* &amp;quot;, &amp;quot;&amp;quot;, other)] %&amp;gt;%
  #arrange by team and date
  .[order(matching_team, date)] %&amp;gt;%
  #convert to an id
  .[, suffix_id := as.numeric(as.factor(other_suffix))] %&amp;gt;%
  #if playing consecutively against the same suffix id (ignoring prefixes for now) put in same &amp;#39;chain&amp;#39;
  .[, match := suffix_id - lead(suffix_id), by = &amp;quot;matching_team&amp;quot;] %&amp;gt;%
  .[match == 0 &amp;amp; lead(match) != 0, chain_id := 1:.N] %&amp;gt;%
  .[match == 0] %&amp;gt;%
  .[, chain_id := na.locf(chain_id, fromLast = TRUE)] %&amp;gt;%
  .[, chain_length := .N, by = chain_id] %&amp;gt;%
  #take only chains at least as long as Tranmere&amp;#39;s run (6)
  .[chain_length &amp;gt; 5] %&amp;gt;%
  .[order(chain_length)] %&amp;gt;%
  .[, c(&amp;quot;date&amp;quot;, &amp;quot;matching_team&amp;quot;, &amp;quot;other&amp;quot;, &amp;quot;chain_length&amp;quot;)]

#print the chains of equal length to Tranmere&amp;#39;s run
print(find_chains)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           date  matching_team               other chain_length
##  1: 1950-12-30   Chesterfield      Leicester City            6
##  2: 1951-01-13   Chesterfield     Manchester City            6
##  3: 1951-01-20   Chesterfield       Coventry City            6
##  4: 1951-02-03   Chesterfield        Cardiff City            6
##  5: 1951-02-17   Chesterfield     Birmingham City            6
##  6: 1951-02-24   Chesterfield        Swansea City            6
##  7: 2009-03-21 Leicester City   Colchester United            6
##  8: 2009-03-28 Leicester City Peterborough United            6
##  9: 2009-04-04 Leicester City     Carlisle United            6
## 10: 2009-04-11 Leicester City     Hereford United            6
## 11: 2009-04-13 Leicester City        Leeds United            6
## 12: 2009-04-18 Leicester City     Southend United            6
## 13: 1921-05-02         Fulham           Hull City            7
## 14: 1921-05-07         Fulham           Hull City            7
## 15: 1921-08-27         Fulham       Coventry City            7
## 16: 1921-08-29         Fulham      Leicester City            7
## 17: 1921-09-03         Fulham       Coventry City            7
## 18: 1921-09-05         Fulham      Leicester City            7
## 19: 1921-09-10         Fulham           Hull City            7
## 20: 1920-04-17  Leyton Orient     Birmingham City            7
## 21: 1920-04-24  Leyton Orient     Birmingham City            7
## 22: 1920-04-26  Leyton Orient      Leicester City            7
## 23: 1920-05-01  Leyton Orient      Leicester City            7
## 24: 1920-08-28  Leyton Orient      Leicester City            7
## 25: 1920-08-30  Leyton Orient        Cardiff City            7
## 26: 1920-09-04  Leyton Orient      Leicester City            7
## 27: 1920-10-09   Notts County          Stoke City            7
## 28: 1920-10-16   Notts County          Stoke City            7
## 29: 1920-10-23   Notts County        Cardiff City            7
## 30: 1920-10-30   Notts County        Cardiff City            7
## 31: 1920-11-06   Notts County       Coventry City            7
## 32: 1920-11-13   Notts County       Coventry City            7
## 33: 1920-11-20   Notts County      Leicester City            7
##           date  matching_team               other chain_length&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so In fact an identical length chain on matching suffixes has occured twice, with Chesterfield playing a range of cities at the start of 1951 in League Two, and much more recently, Leicester playing 6 different Uniteds in a row at the tail end of the 2008/2009 season. This is also the season that saw them recover from being relegated from the Chmapionship and start moving towards winning the title in 2015-2016 season.&lt;/p&gt;
&lt;p&gt;Some longer chains involving cities happened in the 1920-1921 seasons in the Second Division, but it seems like the scheduling worked differently then and teams played back to back more, so doesn’t really count.&lt;/p&gt;
&lt;p&gt;Having originally misread the question, I also wanted to find out the longest chain of a team playing teams that matched &lt;em&gt;their own&lt;/em&gt; suffix. We can do this using a similar method&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matching_fixtures &amp;lt;- england_data %&amp;gt;%
  #get only matches between teams with matching prefix/suffixes
  .[, home_suffix := gsub(&amp;quot;.* &amp;quot;, &amp;quot;&amp;quot;, home)] %&amp;gt;%
  .[, away_suffix := gsub(&amp;quot;.* &amp;quot;, &amp;quot;&amp;quot;, visitor)] %&amp;gt;%
  .[home_suffix == away_suffix, match := home_suffix] %&amp;gt;%
  .[!is.na(match)] %&amp;gt;%
  #remove matches where teams from the same city play each other
  .[!match %in% c(&amp;quot;Bradford&amp;quot;, &amp;quot;Bristol&amp;quot;, &amp;quot;Burton&amp;quot;, &amp;quot;Manchester&amp;quot;, &amp;quot;Sheffield&amp;quot;)]

#get all the teams that have played teams with matching suffixes
matching_teams &amp;lt;- unique(c(as.character(matching_fixtures$home),
                           as.character(matching_fixtures$visitor)))

#elongate the data and look for chains
find_chains &amp;lt;- rbindlist(lapply(matching_teams, function(team) {
  england_data %&amp;gt;%
    .[home == team | visitor == team] %&amp;gt;%
    .[order(date)] %&amp;gt;%
    .[, matching_team := team]
  })) %&amp;gt;%
  .[home == matching_team, other := visitor] %&amp;gt;%
  .[visitor == matching_team, other := home] %&amp;gt;%
  #id matches and remove matches not involving teams with identical suffixes
  .[, match_id := 1:.N, by = matching_team] %&amp;gt;%
  .[!is.na(match)] %&amp;gt;%
  #find chains of identical suffixed matches
  .[, chain := match_id - lag(match_id)] %&amp;gt;%
  .[chain == 1 &amp;amp; lag(chain) != 1, chain_id := 1:.N] %&amp;gt;%
  .[chain == 1] %&amp;gt;%
  .[, chain_id := na.locf(chain_id)] %&amp;gt;%
    .[, chain_length := .N, by = chain_id] %&amp;gt;%
  #take only chains at least as long as Tranmere&amp;#39;s run (6)
  .[chain_length &amp;gt; 4] %&amp;gt;%
  .[order(chain_length)] %&amp;gt;%
  .[, c(&amp;quot;date&amp;quot;, &amp;quot;matching_team&amp;quot;, &amp;quot;other&amp;quot;, &amp;quot;chain_length&amp;quot;)]

print(find_chains)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           date   matching_team             other chain_length
##  1: 1919-12-13      Stoke City   Birmingham City            5
##  2: 1919-12-20      Stoke City    Leicester City            5
##  3: 1919-12-25      Stoke City     Coventry City            5
##  4: 1919-12-26      Stoke City     Coventry City            5
##  5: 1919-12-27      Stoke City    Leicester City            5
##  6: 1919-09-01       Hull City        Stoke City            5
##  7: 1919-09-06       Hull City   Birmingham City            5
##  8: 1919-09-08       Hull City        Stoke City            5
##  9: 1919-09-13       Hull City        Leeds City            5
## 10: 1919-09-20       Hull City        Leeds City            5
## 11: 1988-09-24 Carlisle United  Rotherham United            5
## 12: 1988-09-30 Carlisle United  Cambridge United            5
## 13: 1988-10-04 Carlisle United Colchester United            5
## 14: 1988-10-08 Carlisle United   Hereford United            5
## 15: 1988-10-15 Carlisle United    Torquay United            5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the record for that is only slightly shorter! with Stoke and Hull City playing a range of cities in the 1919-1920 season (but see above for scheduling differences) and Carlisle United playing 5 other different Uniteds in a row in the old Fourth Division.&lt;/p&gt;
&lt;div id=&#34;answer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;The record is 7 matches set by Notts County, Leyton Orient, and Fulham in 1920/1921 playing 7 teams with the suffix ‘city’ in a row. The Leyton Orient and Fulham chains stretch over the end of one season and into the next, so only Notts County really satisifies the question. However, the scheduling in these years involved a lot of back to back matches and so is cheating a bit.&lt;/p&gt;
&lt;p&gt;More recently Chesterfield played 6 different teams with the suffix ‘city’ in a row in 1950/1951, and Leceister played 6 different ’united’s in a row in their promotion season from League One in 2008/2009.&lt;/p&gt;
&lt;p&gt;Even more bizarre, Carlisle United played 5 other different United’s at the start of the 1988/1989 old Fourth Division season.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;youth-of-the-nation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Youth Of The Nation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theguardian.com/football/2018/aug/01/footballers-who-have-backed-out-of-a-transfer-for-another-late-in-the-day&#34;&gt;“If Lucas Hernández was born a year and a half later, his age would be a lower than his shirt number (21). Have any World Cup winners achieved this?” muses Edward Gibson.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The easiest way to check this is just to scrape all of the squads off of the wiki pages for the World Cups. I only did from 1954 onwards as before this the squad no and birthdate data is a bit patchy.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#links to the world cup squads pages
wiki_cup_squads &amp;lt;- sprintf(&amp;quot;https://en.wikipedia.org/wiki/%s_FIFA_World_Cup_squads&amp;quot;,
                           seq(1954, 2018, by = 4))

#scrape all the player data we need
world_cup_squads &amp;lt;- rbindlist(lapply(wiki_cup_squads[1:17], function(link) {
  year &amp;lt;- gsub(&amp;quot;.*\\/wiki\\/&amp;quot;, &amp;quot;&amp;quot;, gsub(&amp;quot;_FIFA_World.*&amp;quot;, &amp;quot;&amp;quot;, link))
  read &amp;lt;- read_html(link)
  
  sq_no &amp;lt;- read %&amp;gt;% 
    html_nodes(&amp;quot;.plainrowheaders td:nth-child(1)&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    as.numeric()
  sq_names &amp;lt;- read %&amp;gt;%
    html_nodes(&amp;quot;.plainrowheaders a:nth-child(1)&amp;quot;) %&amp;gt;% 
    html_text() %&amp;gt;%
    .[. != &amp;quot;&amp;quot;] %&amp;gt;%
    .[!grepl(&amp;quot;^\\[&amp;quot;, .)] %&amp;gt;%
    .[. != &amp;quot;Unattached&amp;quot;] %&amp;gt;% 
    .[!grepl(&amp;quot;captain&amp;quot;, .)]
  sq_dobs &amp;lt;- read %&amp;gt;% 
    html_nodes(&amp;quot;.plainrowheaders td:nth-child(4)&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    str_extract(., &amp;quot;[0-9]{4}-[0-9]{2}-[0-9]{2}&amp;quot;) %&amp;gt;% 
    as.Date()
  countries &amp;lt;- read %&amp;gt;% html_nodes(&amp;quot;h3 .mw-headline&amp;quot;) %&amp;gt;% 
    html_text() %&amp;gt;% 
    trimws()

  if(year &amp;gt; 2006) countries &amp;lt;- countries[1:32]
  
  squad_data &amp;lt;- data.frame(name = sq_names,
                           no = sq_no,
                           dob = sq_dobs,
                           year= year) %&amp;gt;%
    setDT() %&amp;gt;%
    .[!grepl(&amp;quot;Nery Pumpido&amp;quot;, name)] %&amp;gt;%
    .[no == 1, country := countries] %&amp;gt;%
    .[, country := na.locf(country)] %&amp;gt;%
    .[, c(&amp;quot;name&amp;quot;, &amp;quot;no&amp;quot;, &amp;quot;dob&amp;quot;, &amp;quot;year&amp;quot;, &amp;quot;country&amp;quot;)]
}))

#find all world cup squad players with shirt numbers greater than their age in years
young_players &amp;lt;- world_cup_squads %&amp;gt;%
  .[, age := as.numeric(difftime(as.Date(paste0(year, &amp;quot;-07-01&amp;quot;)), dob)) / 365] %&amp;gt;%
  .[age &amp;lt; no]

print(young_players)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        name no        dob year    country      age
##   1:   Aleksandar Petakovic 22 1932-08-06 1954 Yugoslavia 21.91507
##   2:         Ranulfo Cortés 22 1934-07-09 1954     Mexico 19.99178
##   3:             Coskun Tas 22 1935-04-23 1954     Turkey 19.20274
##   4:            Omar Méndez 20 1934-08-07 1954    Uruguay 19.91233
##   5:          Johnny Haynes 21 1934-10-17 1954    England 19.71781
##  ---                                                              
## 110: Trent Alexander-Arnold 22 1998-10-07 2018    England 19.74521
## 111:    José Luis Rodríguez 21 1998-06-19 2018     Panama 20.04658
## 112:       Dávinson Sánchez 23 1996-06-12 2018   Colombia 22.06575
## 113:         Dawid Kownacki 23 1997-03-14 2018     Poland 21.31233
## 114:           Moussa Wagué 22 1998-10-04 2018    Senegal 19.75342&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Overall 114 players are found. England actually have the most players with shirt numbers higher than their age with 9: Haynes, Hooper, Owen, Ferdinand, Carson, Walcott, Barkeley, Shaw, Alexander-Arnold. Surprisingly, most of these young English callups are pretty recent.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(data = young_players, aes(year)) +
  geom_bar() +
  ggtitle(&amp;quot;Number of Players in World Cup Squads With Nos &amp;gt; Age&amp;quot;) +
  xlab(&amp;quot;World Cup Year&amp;quot;) +
  ylab(&amp;quot;Number&amp;quot;)

print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-08-05-The_Knowledge_1_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems that the real high point for this was the turn of the century with young players being given a shot at the tail end of squads, which is returning to pre-1998 levels by 2018.&lt;/p&gt;
&lt;p&gt;The data on these squad players is then merged with the data on the winning teams to find those who played for nations who went on to win the world cup.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wc_winners &amp;lt;- data.frame(winner = c(&amp;quot;West Germany&amp;quot;,&amp;quot;Brazil&amp;quot;,&amp;quot;Brazil&amp;quot;,&amp;quot;England&amp;quot;,
                                    &amp;quot;Brazil&amp;quot;,&amp;quot;West Germany&amp;quot;,&amp;quot;Argentina&amp;quot;,&amp;quot;Italy&amp;quot;,
                                    &amp;quot;Argentina&amp;quot;,&amp;quot;West Germany&amp;quot;,&amp;quot;Brazil&amp;quot;,&amp;quot;France&amp;quot;,
                                    &amp;quot;Brazil&amp;quot;,&amp;quot;Italy&amp;quot;,&amp;quot;Spain&amp;quot;,&amp;quot;Germany&amp;quot;,&amp;quot;France&amp;quot;),
                         year = seq(1954, 2018, 4))

#merge data with winners and find matches
young_players %&amp;lt;&amp;gt;% .[, year := as.numeric(as.character(year))] %&amp;gt;%
  .[, country := gsub(&amp;quot;(^\\s+)|(\\s+$)&amp;quot;, &amp;quot;&amp;quot;, country)] %&amp;gt;%
  merge(., wc_winners, by = &amp;quot;year&amp;quot;) %&amp;gt;%
  .[winner == country]

#kaka only one to have played as per https://en.wikipedia.org/wiki/List_of_FIFA_World_Cup_winners#By_year
print(young_players)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    year    name no        dob country      age winner
## 1: 1970    Leão 22 1949-07-11  Brazil 20.98630 Brazil
## 2: 1994 Ronaldo 20 1976-09-22  Brazil 17.78356 Brazil
## 3: 2002    Kaká 23 1982-04-22  Brazil 20.20548 Brazil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So only the great &lt;a href=&#34;https://en.wikipedia.org/wiki/%C3%89merson_Le%C3%A3o&#34;&gt;Émerson Leão&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Ronaldo_(Brazilian_footballer)&#34;&gt;Ronaldo&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Kak%C3%A1&#34;&gt;Kaka&lt;/a&gt; satisfy the question. However, of these only Kaka played any part during the tournament, which only amounted to 25 minutes vs Costa Rica.&lt;/p&gt;
&lt;p&gt;Which players &lt;em&gt;could&lt;/em&gt; have satisfied this if they had a larger squad number?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;youngest_players &amp;lt;- world_cup_squads %&amp;gt;%
  .[, age := as.numeric(difftime(as.Date(paste0(year, &amp;quot;-07-01&amp;quot;)), dob)) / 365] %&amp;gt;%
  .[age &amp;lt; 23] %&amp;gt;%
  .[, country := gsub(&amp;quot;(^\\s+)|(\\s+$)&amp;quot;, &amp;quot;&amp;quot;, country)] %&amp;gt;%
  .[, year := as.numeric(as.character(year))] %&amp;gt;%
  merge(., wc_winners, by = &amp;quot;year&amp;quot;) %&amp;gt;%
  .[winner == country] %&amp;gt;%
  .[, dob := NULL]

#gives 53 potential results with world cup winners under the age of 23
print(youngest_players)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     year                 name no      country      age       winner
##  1: 1954          Horst Eckel  6 West Germany 22.40822 West Germany
##  2: 1954     Ulrich Biesinger 18 West Germany 20.91507 West Germany
##  3: 1958                 Pelé 10       Brazil 17.69863       Brazil
##  4: 1958               Moacir 13       Brazil 22.13425       Brazil
##  5: 1958              Orlando 15       Brazil 22.79452       Brazil
##  6: 1958              Mazzola 18       Brazil 19.95068       Brazil
##  7: 1962             Coutinho  9       Brazil 19.06849       Brazil
##  8: 1962                 Pelé 10       Brazil 21.70137       Brazil
##  9: 1962             Jurandir 14       Brazil 21.64658       Brazil
## 10: 1962            Mengálvio 17       Brazil 22.55342       Brazil
## 11: 1962        Jair da Costa 18       Brazil 21.99178       Brazil
## 12: 1966            Alan Ball  7      England 21.15068      England
## 13: 1966        Martin Peters 16      England 22.66027      England
## 14: 1966        Norman Hunter 18      England 22.68767      England
## 15: 1970            Clodoaldo  5       Brazil 20.77534       Brazil
## 16: 1970        Marco Antônio  6       Brazil 19.41096       Brazil
## 17: 1970          Paulo Cézar 18       Brazil 21.05479       Brazil
## 18: 1970                  Edu 19       Brazil 20.91507       Brazil
## 19: 1970             Zé Maria 21       Brazil 21.13425       Brazil
## 20: 1970                 Leão 22       Brazil 20.98630       Brazil
## 21: 1974        Paul Breitner  3 West Germany 22.83562 West Germany
## 22: 1974           Uli Hoeneß 14 West Germany 22.50137 West Germany
## 23: 1974        Rainer Bonhof 16 West Germany 22.27123 West Germany
## 24: 1978    Alberto Tarantini 20    Argentina 22.59178    Argentina
## 25: 1978 José Daniel Valencia 21    Argentina 22.75890    Argentina
## 26: 1982        Franco Baresi  2        Italy 22.16164        Italy
## 27: 1982     Giuseppe Bergomi  3        Italy 18.53699        Italy
## 28: 1982      Daniele Massaro 17        Italy 21.12055        Italy
## 29: 1986       Claudio Borghi  4    Argentina 21.76986    Argentina
## 30: 1986           Luis Islas 15    Argentina 20.53699    Argentina
## 31: 1990       Andreas Möller 17 West Germany 22.84384 West Germany
## 32: 1994              Ronaldo 20       Brazil 17.78356       Brazil
## 33: 1998       Patrick Vieira  4       France 22.03562       France
## 34: 1998        Thierry Henry 12       France 20.88493       France
## 35: 1998      David Trezeguet 20       France 20.72329       France
## 36: 2002           Ronaldinho 11       Brazil 22.29315       Brazil
## 37: 2002                 Kaká 23       Brazil 20.20548       Brazil
## 38: 2006     Daniele De Rossi  4        Italy 22.95342        Italy
## 39: 2010            Juan Mata 13        Spain 22.18904        Spain
## 40: 2010      Sergio Busquets 16        Spain 21.97260        Spain
## 41: 2010                Pedro 18        Spain 22.94247        Spain
## 42: 2010        Javi Martínez 20        Spain 21.84110        Spain
## 43: 2014      Matthias Ginter  3      Germany 20.46027      Germany
## 44: 2014       Julian Draxler 14      Germany 20.79178      Germany
## 45: 2014            Erik Durm 15      Germany 22.15068      Germany
## 46: 2014          Mario Götze 19      Germany 22.09041      Germany
## 47: 2014     Shkodran Mustafi 21      Germany 22.21918      Germany
## 48: 2018      Benjamin Pavard  2       France 22.27397       France
## 49: 2018     Presnel Kimpembe  3       France 22.89863       France
## 50: 2018         Thomas Lemar  8       France 22.64932       France
## 51: 2018        Kylian Mbappé 10       France 19.54247       France
## 52: 2018      Ousmane Dembélé 11       France 21.14247       France
## 53: 2018      Lucas Hernández 21       France 22.39178       France
##     year                 name no      country      age       winner&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#most of these young players actually played at their world cups and many appeared in finals
youngest_players_appeared &amp;lt;- youngest_players[c(1, 3:6, 8, 12:13, 15:18, 21:23, 24:25, 27, 29, 31, 33:35, 36:37, 38, 39:42, 44, 46:47, 48:53)]

#find nearest matches
youngest_players_appeared %&amp;lt;&amp;gt;% .[, diff := age - no]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The closest other players to make it are David Trezeguet (1998, 20.7years no 20), Shkodran Mustafi (2014, 22.2years, no 21) and then Lucas Hernandez (22.4years, no 21). Hernandez is the closest one to actually play in the World Cup final. Alberto Tarantini is his closest competition at 22.6 years old and wearing shirt number 20 in the 1978 final.&lt;/p&gt;
&lt;div id=&#34;answer-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Yes, three winners have appeared in World Cups with an age less than their shirt number. All Brazilians: Émerson Leão in 1970, Ronaldo in 1994, and Kaka in 2002. However only Kaka actually played (for 25 minutes vs. Costa Rica) in the finals.&lt;/p&gt;
&lt;p&gt;Other close calls are David Trezeguet (20.7, no 20 in 1998) and Shkodran Mustafi (22.2, no 21 in 2014).&lt;/p&gt;
&lt;p&gt;Hernandez &lt;em&gt;is&lt;/em&gt; the closest to acheiving this having played in the final itself, with only Alberto Tarantini (22.5, no 20 in 1978) and Mario Goetze (22.1, no 19 in 2014) in close competition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
