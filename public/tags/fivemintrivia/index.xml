<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fivemintrivia on Robert Hickman</title>
    <link>/tags/fivemintrivia/</link>
    <description>Recent content in fivemintrivia on Robert Hickman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/fivemintrivia/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Five Minute Football Trivia - Trans-Europe Express</title>
      <link>/post/five_min_trivia_kraftwerk/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/five_min_trivia_kraftwerk/</guid>
      <description>


&lt;p&gt;&lt;em&gt;generally as I have less and less time to waste on meaningless football stats I get halfway through a post and abandon it. To remedy this, I want to start pushing out posts that give a reasonable half-guess at an answer within an hour or so without needing to really check my working or write good prose. This is the third of these&lt;/em&gt;&lt;/p&gt;
For this weeks question, I’m stealing straight from the source of most of my posts, &lt;a href=&#34;https://www.theguardian.com/football/series/theknowledge&#34;&gt;The Knowledge column&lt;/a&gt; at The Guardian:
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
What is the shortest total distance a club has had to travel in a Champions League winning campaign? (Perhaps average distance per (away) fixture to balance out changes in format over the years.)
&lt;/p&gt;
— JBfaeDundee (&lt;span class=&#34;citation&#34;&gt;@JBfaeDundee&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/JBfaeDundee/status/1242529510735720448?ref_src=twsrc%5Etfw&#34;&gt;March 24, 2020&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
I’m going to turn it on it’s head a bit, and find the longest distance campaigns, mostly because I find it more interesting, but also because it reminded me of this tweet from a few years ago
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
The longest away trip in the world took place today as Baltika Kaliningrad travelled about 10,000 km to meet Luch Vladivostok in the second division in Russia. &lt;br&gt;The gamed ended 0-0, of course. &lt;a href=&#34;https://t.co/EsSpmWzddk&#34;&gt;pic.twitter.com/EsSpmWzddk&lt;/a&gt;
&lt;/p&gt;
— Michael Yokhin (&lt;span class=&#34;citation&#34;&gt;@Yokhin&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/Yokhin/status/980050993810493440?ref_src=twsrc%5Etfw&#34;&gt;March 31, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;And generally I love weird quirks of geography that lead to commutes of 13 hours like this.&lt;/p&gt;
&lt;p&gt;As always, first load the libraries we need. Having looked around, the most organised dataset seemed to be at &lt;a href=&#34;https://www.worldfootball.net&#34;&gt;worldfootball.net&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#scrape
library(rvest)
#using data from worldfootbal.net
base_url &amp;lt;- &amp;quot;https://www.worldfootball.net&amp;quot;

#tidy
library(tidyverse)
library(magrittr)
#map
library(sf)
library(rnaturalearth)
library(ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To find the location of every team, we need a data.frame of every team to have competed in the Champions League (and Qualifying) since it’s inception. We can get that by sprintf’ing a list of urls and scraping the links to each team page from there. For this, and most of the scraping jobs below, I saved the data from the first time I scrape so that I don’t have to continually re-stress the worldfootball server. The datasets can be found in the static folder of my website GitHub.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#the years each competition took place
years &amp;lt;- 1955:2018
qual_years &amp;lt;- c(1966, 1969:1971, 1978:1982, 1992:2018)

#sprintf the correct urls together
all_urls &amp;lt;- c(sprintf(&amp;quot;/champions-league-%d-%d&amp;quot;, years, years+1),
      sprintf(&amp;quot;/champions-league-qualifikation-%d-%d&amp;quot;, qual_years, qual_years+1))

#some exceptions
all_urls[grepl(&amp;quot;champions-league-2010-2011&amp;quot;, all_urls)] %&amp;lt;&amp;gt;% paste0(., &amp;quot;_3&amp;quot;)
all_urls[grepl(&amp;quot;champions-league-2008-2009&amp;quot;, all_urls)] %&amp;lt;&amp;gt;% paste0(., &amp;quot;_2&amp;quot;)
all_urls[grepl(&amp;quot;qualifikation-2008-2009&amp;quot;, all_urls)] %&amp;lt;&amp;gt;% gsub(&amp;quot;qualifikation&amp;quot;, &amp;quot;qf&amp;quot;, .)
all_urls[grepl(&amp;quot;qualifikation&amp;quot;, all_urls) &amp;amp; as.numeric(gsub(&amp;quot;.*-&amp;quot;,&amp;quot;&amp;quot;,all_urls)&amp;gt;2009)]  %&amp;lt;&amp;gt;%
  gsub(&amp;quot;qualifikation&amp;quot;, &amp;quot;qual&amp;quot;, .)

#scrape the list of each team&amp;#39;s links
teams &amp;lt;- map_df(all_urls, function(competition_link) {
  #read once and scrape from there
  read &amp;lt;- read_html(paste0(base_url, &amp;quot;/players&amp;quot;, competition_link))
  #get the useful info
  competition &amp;lt;- read %&amp;gt;% html_nodes(&amp;quot;h1&amp;quot;) %&amp;gt;% html_text() %&amp;gt;% gsub(&amp;quot; » .*&amp;quot;, &amp;quot;&amp;quot;, .)
  team_name &amp;lt;- read %&amp;gt;% html_nodes(&amp;quot;td:nth-child(2) a&amp;quot;) %&amp;gt;% html_text()
  team_info &amp;lt;- read %&amp;gt;% html_nodes(&amp;quot;td:nth-child(4) a&amp;quot;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  #compile into a df to return
  df &amp;lt;- data.frame(competition, team_name, team_info)
  return(df)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can then take a look at what we have on our hands&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(teams)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  competition              team_name
## 1 Champions League 1955/1956      1. FC Saarbrücken
## 2 Champions League 1955/1956              Aarhus GF
## 3 Champions League 1955/1956               AC Milan
## 4 Champions League 1955/1956 Budapesti Vörös Lobogó
## 5 Champions League 1955/1956         Djurgårdens IF
## 6 Champions League 1955/1956       Gwardia Warszawa
##                     team_info
## 1 /teams/1-fc-saarbruecken/1/
## 2         /teams/aarhus-gf/1/
## 3          /teams/ac-milan/1/
## 4      /teams/mtk-budapest/1/
## 5    /teams/djurgardens-if/1/
## 6  /teams/gwardia-warszawa/1/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a short aside, one of the things I really enjoy about posts like this one is it exposes you to lots of history from the ‘early’ days of organised football and the teams (some of which remain, some do not) that were present then.&lt;/p&gt;
&lt;p&gt;After this, we then want to scrape the data on every match played in the Champions League in a similar manner:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;match_data &amp;lt;- map_df(all_urls, function(competition_link) {
  #read once
  read &amp;lt;- read_html(paste0(base_url, &amp;quot;/all_matches&amp;quot;, competition_link))
  #get the competition/season id from the url
  season &amp;lt;- gsub(&amp;quot;(^.*-)([0-9]{4}-[0-9]{4})(.*)&amp;quot;, &amp;quot;\\2&amp;quot;, competition_link)
  competition &amp;lt;- ifelse(grepl(&amp;quot;-qual|-qf&amp;quot;, competition_link), &amp;quot;ucl-quals&amp;quot;, &amp;quot;ucl&amp;quot;)
  
  #scrape the links to each match- we&amp;#39;ll need some of these later
  match_link &amp;lt;- read %&amp;gt;%
    html_nodes(&amp;quot;td:nth-child(6) a&amp;quot;) %&amp;gt;%
    html_attr(&amp;quot;href&amp;quot;)
  
  #save the champions league matches into a df
  matches_df &amp;lt;- read %&amp;gt;% 
    html_nodes(&amp;quot;#site &amp;gt; div.white &amp;gt; div.content &amp;gt; div &amp;gt; div.box &amp;gt; div &amp;gt; table&amp;quot;) %&amp;gt;% 
    html_table(fill = TRUE, header = FALSE) %&amp;gt;%
    as.data.frame() %&amp;gt;%
    #rename
    select(date = X1, round = X4, home = X3, away = X5, result = X6) %&amp;gt;%
    #mutate the correct round to matches
    mutate(round = case_when(
      round != &amp;quot;-&amp;quot; ~ round
    )) %&amp;gt;%
    mutate(date = case_when(
      date != &amp;quot;&amp;quot; ~ date
    )) %&amp;gt;%
    mutate(round = zoo::na.locf(round)) %&amp;gt;%
    #filter out valid matches
    filter(grepl(&amp;quot;^[0-9]*:[0-9]*|abor.&amp;quot;, result)) %&amp;gt;%
    mutate(date = zoo::na.locf(date)) %&amp;gt;%
    #few exceptions of matches that wern&amp;#39;t played
    filter(!(grepl(&amp;quot;dec.&amp;quot;, result) &amp;amp; date == &amp;quot;01/12/1965&amp;quot;)) %&amp;gt;%
    filter(!(home == &amp;quot;FK Partizani&amp;quot; &amp;amp; date == &amp;quot;30/09/1987&amp;quot;)) %&amp;gt;%
    mutate(match_link, season, competition)
  return(matches_df)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which we can glimpse to see that there are 7206 matches listed across the competition proper and qualification rounds since the 1950s. This resolves down to 2875 unique team-seasons (from ~561 unique teams) who have been involved in either competition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(match_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         date    round                   home             away    result
## 1 04/09/1955 1. Round            Sporting CP         Partizan 3:3 (1:1)
## 2 07/09/1955 1. Round Budapesti Vörös Lobogó   RSC Anderlecht 6:3 (3:2)
## 3 08/09/1955 1. Round        Servette Genève      Real Madrid 0:2 (0:0)
## 4 14/09/1955 1. Round        Rot-Weiss Essen     Hibernian FC 0:4 (0:2)
## 5 20/09/1955 1. Round         Djurgårdens IF Gwardia Warszawa 0:0 (0:0)
## 6 21/09/1955 1. Round              Aarhus GF      Stade Reims 0:2 (0:1)
##                                                                    match_link
## 1            /report/champions-league-1955-1956-1-runde-sporting-cp-partizan/
## 2     /report/champions-league-1955-1956-1-runde-mtk-budapest-rsc-anderlecht/
## 3     /report/champions-league-1955-1956-1-runde-servette-geneve-real-madrid/
## 4    /report/champions-league-1955-1956-1-runde-rot-weiss-essen-hibernian-fc/
## 5 /report/champions-league-1955-1956-1-runde-djurgardens-if-gwardia-warszawa/
## 6           /report/champions-league-1955-1956-1-runde-aarhus-gf-stade-reims/
##      season competition
## 1 1955-1956         ucl
## 2 1955-1956         ucl
## 3 1955-1956         ucl
## 4 1955-1956         ucl
## 5 1955-1956         ucl
## 6 1955-1956         ucl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To work out the distances travelled, we then need to find the locations of each of these matches. The easiest way would be to run through each of those match links and scrape the location data, but that would put a lot of load on the worldfootball servers, so we can be smarter than that.&lt;/p&gt;
&lt;p&gt;Matches generally take place at the home location (or in some exceptions, very close to) of every team (e.g. Arsenal’s home matches take place in North London). However, in the history of the competition, 2-legged matches that ended as a draw used to go to a third leg at a neutral location (for example &lt;a href=&#34;https://www.worldfootball.net/report/champions-league-1992-1993-1-runde-vfb-stuttgart-leeds-united_2/&#34;&gt;Leeds United vs. VFB Stuttgart in 1992 took place at the Nou Camp&lt;/a&gt;). Also, each final is played at a pre-selected venue that is independent of the eventual finalists.&lt;/p&gt;
&lt;p&gt;We can find the data for these matches and scrape the exact location from the match link, while taking the rest from the location of the home team in the tie.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#split data by neutral venue or not
match_locations &amp;lt;- match_data %&amp;gt;%
  split(f = (.$round == &amp;quot;Final&amp;quot; | 
               duplicated(paste(.$home, .$away, .$round, .$season))))

#function for scraping the location of the neutral matches
#uses a link to a specific match
get_neutral_location &amp;lt;- function(link) {
  full_url &amp;lt;- paste0(base_url, link)
  
  #get and munge the location
  node &amp;lt;- &amp;quot;.standard_tabelle tr:nth-child(1) .dunkel~ .dunkel+ .dunkel&amp;quot;
  read &amp;lt;- read_html(full_url)
  location &amp;lt;- read %&amp;gt;% html_nodes(node) %&amp;gt;% html_text() %&amp;gt;%
    gsub(&amp;quot;\\(|\\)|\\/&amp;quot;, &amp;quot;&amp;quot;, .)
  return(location)
}

#run through this function to locate all neutral matches
neutral_matches &amp;lt;- match_locations[[2]] %&amp;gt;%
  mutate(location = unlist(lapply(match_link, get_neutral_location))) %&amp;gt;%
  mutate(type = &amp;quot;neutral&amp;quot;) %&amp;gt;%
  select(-match_link)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see we’ve gathered a few extra matches that wern’t actually neutral, but given we get their correct location anyway, it’s not big deal.&lt;/p&gt;
&lt;p&gt;We then have to use the information on each team to get the location of thier home ground. For larger teams we can get this to within an exct postcode if we so wish, but many (e.g. &lt;a href=&#34;https://www.worldfootball.net/teams/szombierki-bytom/1/&#34;&gt;former Polish champions Szombierki Bytom&lt;/a&gt;) all we can get from their page is the country. This is fine because we’ll combine this with the team name to use a google search to get more exact locations later. (in any case it’s probably fine because the proportion of teams with poor geographic data probably gets lost in noise overall).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#scrape the information on the teams location from their
#worldfootball profile page
get_team_location &amp;lt;- function(link) {
  read &amp;lt;- read_html(paste0(base_url, link))
  
  stadium_link &amp;lt;- read %&amp;gt;%
    html_nodes(&amp;quot;.yellow tr:nth-child(5) a&amp;quot;) %&amp;gt;%
    html_attr(&amp;quot;href&amp;quot;)
  
  #if the link contains a link to a stadium scrape from there
  if(length(stadium_link) &amp;gt; 0) {
    stadium_link &amp;lt;- paste0(base_url, stadium_link)
    location &amp;lt;- read_html(stadium_link) %&amp;gt;%
      html_nodes(&amp;quot;.yellow tr:nth-child(1) td , .yellow tr:nth-child(2) td&amp;quot;) %&amp;gt;%
      html_text() %&amp;gt;%
      .[c(2,4)] %&amp;gt;%
      gsub(&amp;quot;\\r|\\t|\\n&amp;quot;, &amp;quot;&amp;quot;, .) %&amp;gt;%
      paste0(collapse  = &amp;quot; &amp;quot;)
    return(location)
  #otherwise get a best approximation
  } else {
    country &amp;lt;- read %&amp;gt;%
      html_nodes(&amp;quot;.portfolio tr:nth-child(3) .hell+ .hell&amp;quot;) %&amp;gt;%
      html_text() %&amp;gt;%
      gsub(&amp;quot;\\r|\\t|\\n&amp;quot;, &amp;quot;&amp;quot;, .)
    return(country)
  }
}

#run the function over each team
team_info &amp;lt;- teams %&amp;gt;%
  filter(!duplicated(team_name)) %&amp;gt;%
  mutate(location = unlist(lapply(team_info, get_team_location)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(team_info)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  competition              team_name
## 1 Champions League 1955/1956      1. FC Saarbrücken
## 2 Champions League 1955/1956              Aarhus GF
## 3 Champions League 1955/1956               AC Milan
## 4 Champions League 1955/1956 Budapesti Vörös Lobogó
## 5 Champions League 1955/1956         Djurgårdens IF
## 6 Champions League 1955/1956       Gwardia Warszawa
##                     team_info            location
## 1 /teams/1-fc-saarbruecken/1/ Saarbrücken Germany
## 2         /teams/aarhus-gf/1/      Aarhus Denmark
## 3          /teams/ac-milan/1/        Milano Italy
## 4      /teams/mtk-budapest/1/    Budapest Hungary
## 5    /teams/djurgardens-if/1/    Stockholm Sweden
## 6  /teams/gwardia-warszawa/1/         Poland 0000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a rough location for each team we can join everything back together to get a complete list of matches and where (to a best approximation sometimes) they took place.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#join the team location into the non-neutral matches
nonneutral_matches &amp;lt;- match_locations[[1]] %&amp;gt;%
  left_join(., select(team_info, -competition), by = c(&amp;quot;home&amp;quot; = &amp;quot;team_name&amp;quot;)) %&amp;gt;%
  mutate(type = &amp;quot;normal&amp;quot;) %&amp;gt;%
  select(names(neutral_matches)) 

#join neutral and non neutral matches back together
all_matches &amp;lt;- rbind(neutral_matches, nonneutral_matches) %&amp;gt;%
  mutate(match_location = case_when(
    type == &amp;quot;normal&amp;quot; ~ paste(home, &amp;quot;football club&amp;quot;, location),
    type == &amp;quot;neutral&amp;quot; ~ location
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the locations for each match, but not in a quantative form. For that, we’ll use the &lt;a href=&#34;https://cran.r-project.org/web/packages/googleway/vignettes/googleway-vignette.html&#34;&gt;googleway&lt;/a&gt; package that provides access to a variety of Google APIs to access the map geolocation feature of Google Mapes. Obviously, I haven’t included my unique key for this below, but you can get one for free using &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/tutorial&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For each location we’ll return a latitude and longitude that will allow us to calculate exactly the distances between a teams home location and each match they played.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#fake key
google_key &amp;lt;- &amp;quot;myGooGLeKEy1234567&amp;quot;

#function to get lat/lon data from Google Maps
googleway_geocode &amp;lt;- function(location, key){
  data &amp;lt;- google_geocode(location, key = key)
  latlon &amp;lt;- data$results$geometry$location[1,]
  
  if(length(latlon) == 0) {
    return(data.frame(lat = NA, lng = NA, location))
  } else {
    return(latlon %&amp;gt;% mutate(location))
  }
}

#run the function over each unique location
locations &amp;lt;- unique(all_matches$match_location) %&amp;gt;%
  map_df(., googleway_geocode, key = google_key)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gets us 99% of the way there, though the API does miss a few smaller/less well formatted clubs (e.g. Monaco is not ‘in’ France per se, but an enclave in the French territory, which fucks Google Maps up)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;locations %&amp;gt;%
  filter(is.na(lat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    lat lng                                           location
## 1   NA  NA              AS Monaco football club Monaco France
## 2   NA  NA St Patrick&amp;#39;s Athletic football club Dublin Ireland
## 3   NA  NA  FK Sloga Jugomagnat football club North Macedonia
## 4   NA  NA        Tsement Ararat football club Ararat Armenia
## 5   NA  NA        NK Brotnjo football club Bosnia-Herzegovina
## 6   NA  NA             Dunaferr SE football club Hungary 0000
## 7   NA  NA          Araks Ararat football club Ararat Armenia
## 8   NA  NA                FK Gomel football club Belarus 1959
## 9   NA  NA                Sioni Bolnisi football club Georgia
## 10  NA  NA                 SS Murata football club San Marino
## 11  NA  NA      KF Shkëndija 79 football club North Macedonia
## 12  NA  NA              SP Tre Penne football club San Marino
## 13  NA  NA                   Ulisses FC football club Armenia
## 14  NA  NA             SP La Fiorita football club San Marino
## 15  NA  NA      Lincoln Red Imps football club Gibraltar 0000
## 16  NA  NA                    Dila Gori football club Georgia
## 17  NA  NA                  KF Trepça&amp;#39;89 football club Kosovo
## 18  NA  NA                  Europa FC football club Gibraltar
## 19  NA  NA                   FK Spartaks football club Latvia
## 20  NA  NA                    FK Kukësi football club Albania&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve this, the best way sometimes is just the stupidest, so here are the manually found locations of these clubs&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#manually enter lat lon for the missing locations
missing_locs &amp;lt;- data.frame(
  lat = c(43.73, 53.34, 42.02, 39.86, 43.2, 46.96, 39.86, 52.44, 41.44, 43.93, 42.01, 43.93, 40.17, 43.93, 36.14, 41.98, 42.88, 36.14, 56.94, 42.07),
  lng = c(7.41, -6.27, 21.44, 44.69, 17.7, 18.94, 44.69, 31.01, 44.53, 12.44, 20.97, 12.44, 44.52, 12.44, -5.35, 44.10, 20.86, -5.35, 23.61, 20.42),
  location = locations$location[is.na(locations$lat)]
)

#bind everything together
all_locations &amp;lt;- locations %&amp;gt;%
  filter(!is.na(lat)) %&amp;gt;%
  rbind(., missing_locs) %&amp;gt;%
  #convert to an sf object with worldwide projection
  st_as_sf(coords = c(&amp;quot;lng&amp;quot;, &amp;quot;lat&amp;quot;), crs = st_crs(&amp;quot;+init=epsg:4326&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end, I also cast the object to an &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf1.html&#34;&gt;simple features&lt;/a&gt; (sf) data.frame to allow for easier manipulation of geographic data and add the reference for Earth’s lat/lon coordinate system (epsg:4326).&lt;/p&gt;
&lt;p&gt;We can then merge the geographic data into our dataframe of every match and see the location of every club to have played in (some stage) of the Champions League over the last ~60 years&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#join in the geographic information
all_matches %&amp;lt;&amp;gt;% left_join(., all_locations, by = c(&amp;quot;match_location&amp;quot; = &amp;quot;location&amp;quot;))

#plot the home locations of all teams
p1 &amp;lt;- all_matches %&amp;gt;%
  filter(type == &amp;quot;normal&amp;quot;) %&amp;gt;%
  filter(!duplicated(home)) %&amp;gt;%
  ggplot(.) +
  geom_sf(data = st_as_sf(ne_countries(scale=110), st_crs(&amp;quot;+init:epsg=4326&amp;quot;)),
          colour = NA) +
  geom_sf_text(aes(label = home, geometry = geometry), alpha = 0.5) +
  #taken from st_bbox(all_matches$geometry)
  coord_sf(xlim = c(-24, 78), ylim = c(30, 67)) +
  ggtitle(&amp;quot;Home location of every Champions League team&amp;quot;,
          subtitle = &amp;quot;1955-2019, includes qualifying rounds&amp;quot;) +
  theme_map()

#plot 
p1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-29-ucl_distance_files/figure-html/plot_locations-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It’s quite nice to see the distribution- hubs around large cities with competitive leagues (e.g. Denmark, Czech Republic, The Rhine), with extremes in the north in Iceland/Faroe Islands, to the south in Israel, and the far far East with the Central Asian UEFA countries.&lt;/p&gt;
&lt;p&gt;The first thing to then work out is the matches per team, which can be done via a simple gather. (in theory you’d want to use pivot_long which has deprecated gather but afaik it doesnt play well with geometry data yet). We also mutate in 2 variables for the home and away teams to keep the matches for data presentation purposes.&lt;/p&gt;
&lt;p&gt;Once we have that, we have each match played by each team, each season. A nice little result is we can see which teams have had the longest campaigns (in terms of number of matches), which it turns out are the Valencia and Bayer Leverkusen teams that qualified and got to the finals of the Champions League during the longer two-group-stage format at the turn of the century.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#melt the mach data by team
team_campaigns &amp;lt;- all_matches %&amp;gt;%
  select(season, date, competition, round, home, away, result, geometry) %&amp;gt;%
  #keep the home and away columns for later
  mutate(home_keep = home, away_keep = away) %&amp;gt;%
  gather(&amp;quot;location&amp;quot;, &amp;quot;team_name&amp;quot;,
         -season, -competition, -round, -result, -geometry, -date,
         -home_keep, -away_keep)

#get the longest campaigns in terms of n matches
longest_campaigns &amp;lt;- team_campaigns %&amp;gt;%
  group_by(season, team_name) %&amp;gt;%
  summarise(matches = n()) %&amp;gt;%
  arrange(-matches)

head(longest_campaigns)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
## # Groups:   season [4]
##   season    team_name        matches
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;              &amp;lt;int&amp;gt;
## 1 1999-2000 Valencia CF           19
## 2 2000-2001 Valencia CF           19
## 3 2001-2002 Bayer Leverkusen      19
## 4 2002-2003 AC Milan              19
## 5 2000-2001 Leeds United          18
## 6 2001-2002 FC Barcelona          18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we want to work out the distance to each match, not the number. To do this, first we want to work backwards and get the lat/lon of each clubs home ground. We can then merge this with the match location data and find the difference between these two locations (in metres). I.e. for every home game, a team will travel 0m to the game, whereas the away club will travel probably many kilometres.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#work backwards and get the home location of each team
team_locations &amp;lt;- all_matches %&amp;gt;%
  filter(type == &amp;quot;normal&amp;quot;) %&amp;gt;%
  filter(!duplicated(home)) %&amp;gt;%
  select(team_name = home, location = match_location) %&amp;gt;%
  left_join(., all_locations, by = &amp;quot;location&amp;quot;)

#merge this in
#for each team match have location of match and home location of team
match_travel &amp;lt;- team_campaigns %&amp;gt;%
  left_join(., select(team_locations, team_name, geometry), by = &amp;quot;team_name&amp;quot;) %&amp;gt;%
  #calculate the distance between each teams home location the match
  mutate(distance = st_distance(geometry.x, geometry.y, by_element = TRUE))

head(match_travel)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      season       date competition       round             result
## 1 1955-1956 13/06/1956         ucl       Final          4:3 (2:2)
## 2 1956-1957 16/09/1956         ucl    1. Round          7:0 (4:0)
## 3 1956-1957 28/11/1956         ucl Round of 16          3:1 (1:0)
## 4 1956-1957 12/12/1956         ucl Round of 16          2:0 (2:0)
## 5 1956-1957 30/05/1957         ucl       Final          2:0 (0:0)
## 6 1957-1958 15/10/1957         ucl    1. Round 1:1 (0:1, 1:1) aet
##                   geometry.x                 home_keep        away_keep
## 1  POINT (2.253049 48.84144)               Real Madrid      Stade Reims
## 2  POINT (7.453112 51.49276)         Borussia Dortmund  Spora Luxemburg
## 3  POINT (2.253049 48.84144)                  OGC Nice       Rangers FC
## 4 POINT (-3.688344 40.45305)               Real Madrid       Rapid Wien
## 5 POINT (-3.688344 40.45305)               Real Madrid   ACF Fiorentina
## 6  POINT (13.40849 52.54356) SC Wismut Karl-Marx-Stadt Gwardia Warszawa
##   location                 team_name                 geometry.y
## 1     home               Real Madrid POINT (-3.688344 40.45305)
## 2     home         Borussia Dortmund  POINT (7.450945 51.49807)
## 3     home                  OGC Nice  POINT (7.195828 43.68232)
## 4     home               Real Madrid POINT (-3.688344 40.45305)
## 5     home               Real Madrid POINT (-3.688344 40.45305)
## 6     home SC Wismut Karl-Marx-Stadt  POINT (12.69902 50.58733)
##           distance
## 1 1043745.9567 [m]
## 2     609.3633 [m]
## 3  688197.6337 [m]
## 4       0.0000 [m]
## 5       0.0000 [m]
## 6  223136.3518 [m]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then all we need to do is group by each team and season and calculate the total distance travelled by that team. I then printed the top 10 total distances (in km) that team had to travel to complete all of their matches&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;longest_distance_campaigns &amp;lt;- match_travel %&amp;gt;%
  group_by(season, team_name) %&amp;gt;%
  mutate(total_travel = sum(distance), 
         date = as.Date(gsub(&amp;quot;\\/&amp;quot;, &amp;quot;-&amp;quot;, date), &amp;quot;%d-%m-%Y&amp;quot;)) %&amp;gt;%
  select(season, date, competition, round, team = team_name,
         home = home_keep, away = away_keep, result, distance, total_travel) %&amp;gt;%
  arrange(-total_travel, date) 

longest_distance_campaigns %&amp;gt;%
  filter(!duplicated(paste(season, team))) %&amp;gt;%
  select(season, team, total_travel) %&amp;gt;%
  mutate(total_travel = total_travel / 1000) %&amp;gt;%
  head(., n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
## # Groups:   season, team [10]
##    season    team             total_travel
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;
##  1 2015-2016 FK Astana              25874.
##  2 2011-2012 APOEL Nikosia          19112.
##  3 2009-2010 APOEL Nikosia          18649.
##  4 2011-2012 SL Benfica             17817.
##  5 2009-2010 Maccabi Haifa          17808.
##  6 2000-2001 Galatasaray            17371.
##  7 2010-2011 Hapoel Tel Aviv        17350.
##  8 2017-2018 Qarabag FK             17286.
##  9 2015-2016 Maccabi Tel Aviv       17041.
## 10 2002-2003 Lokomotiv Moskva       16732.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps unsurprisingly &lt;a href=&#34;https://en.wikipedia.org/wiki/2015_FC_Astana_season&#34;&gt;FK Astana&lt;/a&gt; from the capital of Kazakhstan come out top (by far), having worked through the qualifying round and making it to the group stages (where they were unbeaten at home). After that, succesful teams from the far corners of Europe (Benfica, APOEL, Hapoel Tel Aviv) come out on top. I was surprised that Lokomotiv are the only Russian team in the list, and as far back as 2002-2003. Also that all of these seasons are from this century (perhaps due to the ever increasing number of fixtures in the Champions League).&lt;/p&gt;
&lt;p&gt;I select the matches FK Astana played in their record-breaking 2015-2016 below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;longest_distance_campaigns %&amp;gt;%
  filter(season == &amp;quot;2015-2016&amp;quot; &amp;amp; team == &amp;quot;FK Astana&amp;quot;) %&amp;gt;%
  select(-team)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 10
## # Groups:   season, team [1]
##    team  season date       competition round home  away  result distance
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       [m]
##  1 FK A… 2015-… 2015-07-14 ucl-quals   2. R… NK M… FK A… 1:0 (…  4025459
##  2 FK A… 2015-… 2015-07-22 ucl-quals   2. R… FK A… NK M… 3:1 (…        0
##  3 FK A… 2015-… 2015-07-29 ucl-quals   3. R… HJK … FK A… 0:0 (…  3022119
##  4 FK A… 2015-… 2015-08-05 ucl-quals   3. R… FK A… HJK … 4:3 (…        0
##  5 FK A… 2015-… 2015-08-18 ucl-quals   Play… FK A… APOE… 1:0 (…        0
##  6 FK A… 2015-… 2015-08-26 ucl-quals   Play… APOE… FK A… 1:1 (…  3510897
##  7 FK A… 2015-… 2015-09-15 ucl         Grou… SL B… FK A… 2:0 (…  6180579
##  8 FK A… 2015-… 2015-09-30 ucl         Grou… FK A… Gala… 2:2 (…        0
##  9 FK A… 2015-… 2015-10-21 ucl         Grou… Atlé… FK A… 4:0 (…  5713668
## 10 FK A… 2015-… 2015-11-03 ucl         Grou… FK A… Atlé… 0:0 (…        0
## 11 FK A… 2015-… 2015-11-25 ucl         Grou… FK A… SL B… 2:2 (…        0
## 12 FK A… 2015-… 2015-12-08 ucl         Grou… Gala… FK A… 1:1 (…  3421522
## # … with 1 more variable: total_travel &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, one of the real niche joys in my love is making maps and what better oppurtunity than to map these long distance Champions League campaigns. It’s a bit of a munge to get the lines from point data but sf does at least make it possible.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get the top ten longest campaigns
data &amp;lt;- filter(longest_distance_campaigns,
               !duplicated(paste(season, team)))[1:10,] %&amp;gt;%
  ungroup() %&amp;gt;%
  select(season, team_name = team, total_travel) %&amp;gt;%
  left_join(., match_travel) %&amp;gt;%
  #munge the geometry
  filter(st_geometry(.$geometry.x) != st_geometry(.$geometry.y)) %&amp;gt;%
    mutate(versus = case_when(
        location == &amp;quot;home&amp;quot; ~ away_keep,
        location == &amp;quot;away&amp;quot; ~ home_keep
    )) %&amp;gt;%
    select(season, team_name, versus, round, total_travel,
           geometry.x, geometry.y) %&amp;gt;%
  split(f = rownames(.)) %&amp;gt;%
  #calculate lines from points
  lapply(., function(row) {
    coords1 &amp;lt;- st_coordinates(row$geometry.x) %&amp;gt;%
      split(f = rownames(.))
    coords2 &amp;lt;- st_coordinates(row$geometry.y) %&amp;gt;%
      split(f = rownames(.))
    
    lines &amp;lt;- map2(coords1, coords2, ~st_linestring(rbind(.x, .y)))
    row$lines &amp;lt;- st_as_sfc(lines, crs = st_crs(&amp;quot;+init=epsg:4326&amp;quot;))
    return(row)
  }) %&amp;gt;%
  do.call(rbind, .) %&amp;gt;%
  mutate(title = paste(season, team_name, &amp;quot;=&amp;quot;, round(total_travel/1000), &amp;quot;km&amp;quot;))

#plot the travel of each team
p2 &amp;lt;- ggplot() +
  geom_sf(data = st_as_sf(ne_countries(scale=110), st_crs(&amp;quot;+init:epsg=4326&amp;quot;)), 
          colour = NA) +
  geom_sf(data = data, aes(geometry = lines),
          colour = &amp;quot;red&amp;quot;, size = 2) +
  geom_sf_text(data = data, aes(geometry = geometry.x, label = versus),
               size = 4, nudge_y = 2) +
  #again taken from st_bbox
  coord_sf(xlim = c(-23, 77), ylim = c(66, 30)) +
  theme_map() +
  theme(
    strip.background = element_rect(fill = &amp;quot;white&amp;quot;),
    strip.text = element_text(size = 10)
  ) +
  facet_wrap(~title)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://www.robert-hickman.eu/img/longest_distances_plot.svg&#34; title=&#34;plot of the longest UCL campaigns&#34;&gt;&lt;img src=&#34;/img/longest_distance_campaigns.png&#34; alt=&#34;plot of the longest UCL campaigns&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the image for a higher-res version :)&lt;/p&gt;
&lt;p&gt;Two quick finishing pieces:&lt;/p&gt;
&lt;p&gt;Firstly, what is the single longest journey in the history of the Champions League? Unsurprisingly it involves the 2015-2016 FK Astana season travelling to Benfica on the coast of Portugal (and of course the return fixture).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;match_travel[which.max(match_travel$distance),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          season       date competition   round    result
## 12000 2015-2016 15/09/2015         ucl Group C 2:0 (0:0)
##                       geometry.x  home_keep away_keep location team_name
## 12000 POINT (-9.184503 38.75253) SL Benfica FK Astana     away FK Astana
##                      geometry.y    distance
## 12000 POINT (71.40261 51.10822) 6180579 [m]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And secondly, answering the original question- what the shortest average commute for a winning side?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get UCL champions
winners &amp;lt;- match_travel %&amp;gt;%
  filter(round == &amp;quot;Final&amp;quot;) %&amp;gt;%
  mutate(result = gsub(&amp;quot; .*&amp;quot;, &amp;quot;&amp;quot;, result)) %&amp;gt;%
  separate(result, into = c(&amp;quot;h_goal&amp;quot;, &amp;quot;a_goal&amp;quot;), sep = &amp;quot;:&amp;quot;) %&amp;gt;%
  filter((location == &amp;quot;home&amp;quot; &amp;amp; h_goal &amp;gt; a_goal) | (location == &amp;quot;away&amp;quot; &amp;amp; a_goal &amp;gt; h_goal)) %&amp;gt;%
  select(season, team_name)

#find the matches played by champions
winners_matches &amp;lt;- left_join(winners, match_travel, by = c(&amp;quot;season&amp;quot;, &amp;quot;team_name&amp;quot;)) %&amp;gt;%
  group_by(season, team_name) %&amp;gt;%
  mutate(matches = n(), total_travel = sum(distance/1000)) %&amp;gt;%
  ungroup() %&amp;gt;%
  #calculate average travel per game
  mutate(average_travel = total_travel / matches,
         date = as.Date(gsub(&amp;quot;\\/&amp;quot;, &amp;quot;-&amp;quot;, date), &amp;quot;%d-%m-%Y&amp;quot;)) %&amp;gt;%
  select(season, date, round, home = home_keep, away = away_keep, result, distance, average_travel) %&amp;gt;%
  arrange(average_travel, date)

#print the 3 campaigns with the lowest average travel
head(winners_matches, n = 27)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 27 x 8
##    season  date       round   home    away   result distance average_travel
##    &amp;lt;chr&amp;gt;   &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;       [m]          &amp;lt;dbl&amp;gt;
##  1 1963-1… 1963-09-18 1. Rou… Everto… Inter  0:0 (… 1247112…           410.
##  2 1963-1… 1963-09-25 1. Rou… Inter   Evert… 1:0 (…       0…           410.
##  3 1963-1… 1963-11-27 Round … Inter   AS Mo… 1:0 (…       0…           410.
##  4 1963-1… 1963-12-04 Round … AS Mon… Inter  1:3 (…  236127…           410.
##  5 1963-1… 1964-02-26 Quarte… Partiz… Inter  0:2 (…  891298…           410.
##  6 1963-1… 1964-03-04 Quarte… Inter   Parti… 2:1 (…       0…           410.
##  7 1963-1… 1964-04-15 Semi-f… Boruss… Inter  2:2 (…  684493…           410.
##  8 1963-1… 1964-04-29 Semi-f… Inter   Borus… 2:0 (…       0…           410.
##  9 1963-1… 1964-05-27 Final   Inter   Real … 3:1 (…  632859…           410.
## 10 1971-1… 1971-09-15 1. Rou… AFC Aj… Dynam… 2:0 (…       0…           433.
## # … with 17 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the top three are Inter’s 1963-1964, Ajax’s 1971-1972, and Bayern Munich’s 1973-1974 seasons all of which have an average travel of just over 400km per game. It’s fairly striking how many more Central European teams there are further in the competitions in these seasons comapred to today.&lt;/p&gt;
&lt;p&gt;And that’s all for now! Thanks for reading and I’ll try and put out another post soon :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five Minute Football Trivia - Birthday Five-A-Side</title>
      <link>/post/five_min_trivia_birthdays/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/five_min_trivia_birthdays/</guid>
      <description>


&lt;p&gt;&lt;em&gt;generally as I have less and less time to waste on meaningless football stats I get halfway through a post and abandon it. To remedy this, I want to start pushing out posts that give a reasonable half-guess at an answer within an hour or so without needing to really check my working or write good prose. This is the second of these&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A semi-common question I’ve come across when doing stupid football trivia is ‘Which Birthday could field the best 5-a-side team?’. That is, if you could only select 5 players all born on the same date, which date would you pick in order to allow for the strongest team. For an example, see &lt;a href=&#34;https://www.theguardian.com/football/2014/feb/19/best-team-players-born-same-day&#34;&gt;the Guardian’s knowledge blog&lt;/a&gt; from 2014. However, this was based on gut feel of the team, and this blog (however flawed) deals in data, so let’s go.&lt;/p&gt;
&lt;p&gt;As always, we’ll start by loading some libraries&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#munging
library(tidyverse)
#regression (later)
library(glmnet)
#plots (at the end)
library(ggsoccer)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll then load our data to compare players’ ability. For this I’m using a database I put together of every character in the FIFA database I scraped from &lt;a href=&#34;https://www.fifaindex.com/&#34;&gt;FIFAindex.com&lt;/a&gt;. The database goes back 15 years to the ‘05’ version of the game so we won’t have to limit ourselves to current players. The scraped db can be found at &lt;a href=&#34;https://github.com/RobWHickman/fifadb&#34;&gt;my github&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;*it’s still very beta version at the moment and needs a lot more munging but should work for most applications&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;player_data &amp;lt;- map_df(
  #load female and male player data from the github repo
  c(&amp;quot;male_players.rds&amp;quot;), function(x) {
    data &amp;lt;- readRDS(paste0(&amp;quot;path/to/file/&amp;quot;, x)) %&amp;gt;%
      mutate(version = as.character(version), dob = as.Date(dob, &amp;quot;%Y-%B-%D&amp;quot;))
    return(data)
}) %&amp;gt;%
  #munge date of birth in day and month of birth (don&amp;#39;t care about year)
  mutate(day_of_birth = gsub(&amp;quot;^[0-9]{4}-&amp;quot;, &amp;quot;&amp;quot;, dob)) %&amp;gt;%
  separate(day_of_birth, into = c(&amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;), sep = &amp;quot;-&amp;quot;, remove = FALSE) %&amp;gt;%
  mutate(month = as.numeric(month), day = as.numeric(day), ability = as.numeric(ability))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should give us a 145536 observation df for 65 variables (!). I.e. the information on, and stats of, every character to appear over the last decade and half. We can then look at the spread of birthdays in the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#plot the numbers of players per day of birth in the dataset
p1 &amp;lt;- ggplot(player_data, aes(x = day, fill = factor(month))) +
  geom_histogram(stat = &amp;quot;count&amp;quot;) +
  scale_fill_discrete(guide = FALSE) +
  labs(title = &amp;quot;Number of players sharing birthday by day of year&amp;quot;,
       x = &amp;quot;day of month&amp;quot;) +
  facet_wrap(~month) +
  theme_minimal()

p1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-14-birthdays_files/figure-html/plot_birthdays-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Two peaks that pop out are the massive spike on February 29th and the smaller one of January 1st. On inspection, it looks like these are used as placeholders when true date of birth isn’t known. FOr the reaminer of the post we’re going to exclude them&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#filter out 1st January and 29th February (placeholders for unknown dob?)
player_data &amp;lt;- filter(player_data,
                      !(day == 1 &amp;amp; month == 1) &amp;amp; !(day == 29 &amp;amp; month == 2))

#replot
p2 &amp;lt;- player_data %&amp;gt;%
  ggplot(., aes(x = day, fill = factor(month))) +
  geom_histogram(stat = &amp;quot;count&amp;quot;) +
  scale_fill_discrete(guide = FALSE) +
  labs(title = &amp;quot;Number of players sharing birthday by day of year&amp;quot;,
       subtitle = &amp;quot;placeholder dates removed&amp;quot;,
       x = &amp;quot;day of month&amp;quot;) +
  facet_wrap(~month) +
  theme_minimal()

p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-14-birthdays_files/figure-html/plot_birthdays2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then we can put teams together by taking the top 5 players by the ‘overall ability’ stat for each date of birth:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;by_day &amp;lt;- player_data %&amp;gt;%
  #take only relevant data
  select(name = name2, ability, day, month, version) %&amp;gt;%
  arrange(-ability) %&amp;gt;%
  #group by day and take each players best ability score
  group_by(day, month) %&amp;gt;%
  filter(!duplicated(name)) %&amp;gt;%
  #get the top five by day
  split(f = paste(.$day, .$month)) %&amp;gt;%
  map(., function(dat) dat[1:5,] %&amp;gt;% mutate(team_ability = sum(ability)))

#glimpse the first two teams (1/10 and 1/11)
by_day[1:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $`1 10`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name           ability   day month version team_ability
##   &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Anthony Lopes       85     1    10 19               418
## 2 Mirko Vucinic       84     1    10 07               418
## 3 Julio Baptista      83     1    10 05               418
## 4 Vitor Baía          83     1    10 06               418
## 5 Ümit Karan          83     1    10 07               418
## 
## $`1 11`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name                  ability   day month version team_ability
##   &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Miloš Krasic               83     1    11 11               403
## 2 Filip Kostic               82     1    11 20               403
## 3 Mahler Tressor Moreno      80     1    11 06               403
## 4 Vaclav Sverkos             79     1    11 06               403
## 5 Dimo Wache                 79     1    11 07               403&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to find the best 5 of these teams, we can push it through two quick functions as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get the top 5 teams by summed ability
top_teams &amp;lt;- by_day %&amp;gt;%
  #sum the ability per team
  map_dbl(., function(dat) return(unique(dat$team_ability))) %&amp;gt;%
  sort() %&amp;gt;%
  #return the top n teams
  tail(n = 5) %&amp;gt;%
  names(.) %&amp;gt;%
  map(., function(date) return(by_day[date]))

top_teams&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [[1]]$`7 10`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name                   ability   day month version team_ability
##   &amp;lt;chr&amp;gt;                    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Dida                        91     7    10 06               436
## 2 Gilberto                    89     7    10 05               436
## 3 Sami Hyypiä                 86     7    10 05               436
## 4 Diego Costa                 86     7    10 17               436
## 5 Santiago Hernán Solari      84     7    10 05               436
## 
## 
## [[2]]
## [[2]]$`17 8`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name           ability   day month version team_ability
##   &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Thierry Henry       97    17     8 05               437
## 2 Ederson             88    17     8 20               437
## 3 William Gallas      87    17     8 05               437
## 4 Güiza               83    17     8 09               437
## 5 Phil Jagielka       82    17     8 10               437
## 
## 
## [[3]]
## [[3]]$`22 9`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name                 ability   day month version team_ability
##   &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Ronaldo                   94    22     9 06               437
## 2 Thiago Silva              89    22     9 17               437
## 3 Harry Kewell              86    22     9 05               437
## 4 Javier López Vallejo      84    22     9 06               437
## 5 Maarten Stekelenburg      84    22     9 12               437
## 
## 
## [[4]]
## [[4]]$`24 6`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name                ability   day month version team_ability
##   &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Lionel Messi             94    24     6 12               439
## 2 Juan Román Riquelme      88    24     6 07               439
## 3 Luis García              86    24     6 06               439
## 4 David Alaba              86    24     6 17               439
## 5 Shunsuke Nakamura        85    24     6 08               439
## 
## 
## [[5]]
## [[5]]$`5 2`
## # A tibble: 5 x 6
## # Groups:   day, month [1]
##   name                     ability   day month version team_ability
##   &amp;lt;chr&amp;gt;                      &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Cristiano Ronaldo             94     5     2 17               439
## 2 Neymar Jr                     92     5     2 17               439
## 3 Carlos Tévez                  87     5     2 06               439
## 4 Stefan de Vrij                84     5     2 18               439
## 5 Giovanni Van Bronckhorst      82     5     2 05               439&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So our top team is comprised of &lt;a href=&#34;https://en.wikipedia.org/wiki/Carli_Lloyd&#34;&gt;2017 Carli Lloyd&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Vicente_Rodr%C3%ADguez&#34;&gt;2005 Vincente&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Gareth_Bale&#34;&gt;2017 Gareth Bale&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Sergio_Busquets&#34;&gt;2019 Sergio Busquets&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Mousa_Demb%C3%A9l%C3%A9_(Belgian_footballer)&#34;&gt;2018 Moussa Dembele&lt;/a&gt;, all of whom were born on July 16th.&lt;/p&gt;
&lt;p&gt;However, it’s pretty clear this isn’t a very satisfactory answer; the best team here has 5 midfielders. To get a little deeper, we need to bust out a bit of machine learning. First we want to see what are all the positions in the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#take the primary position for each player
unique(as.character(sapply(player_data$positions, &amp;quot;[[&amp;quot;, 1)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;ST&amp;quot;   &amp;quot;GK&amp;quot;   &amp;quot;CAM&amp;quot;  &amp;quot;CDM&amp;quot;  &amp;quot;CB&amp;quot;   &amp;quot;LCAM&amp;quot; &amp;quot;CM&amp;quot;   &amp;quot;LM&amp;quot;   &amp;quot;CF&amp;quot;   &amp;quot;LWM&amp;quot; 
## [11] &amp;quot;RM&amp;quot;   &amp;quot;RB&amp;quot;   &amp;quot;RWB&amp;quot;  &amp;quot;RWM&amp;quot;  &amp;quot;LB&amp;quot;   &amp;quot;LCB&amp;quot;  &amp;quot;LS&amp;quot;   &amp;quot;LF&amp;quot;   &amp;quot;RCB&amp;quot;  &amp;quot;LAM&amp;quot; 
## [21] &amp;quot;LWB&amp;quot;  &amp;quot;LCDM&amp;quot; &amp;quot;RS&amp;quot;   &amp;quot;LCM&amp;quot;  &amp;quot;RAM&amp;quot;  &amp;quot;RCM&amp;quot;  &amp;quot;RF&amp;quot;   &amp;quot;SW&amp;quot;   &amp;quot;RCDM&amp;quot; &amp;quot;RCAM&amp;quot;
## [31] &amp;quot;LDM&amp;quot;  &amp;quot;RDM&amp;quot;  &amp;quot;RW&amp;quot;   &amp;quot;LW&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So a fair few, but a lot of these (e.g. RW and LW) are basically the same position, just played of the opposite side of the pitch. We’d expect a left winger to &lt;em&gt;mostly&lt;/em&gt; have the same skills as a right winger.&lt;/p&gt;
&lt;p&gt;To fix this we can make these positions ‘symmetric’ by replacin the left/right with a W (for wide):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add in the symmetric position column
player_data$position &amp;lt;- sapply(player_data$positions, &amp;quot;[[&amp;quot;, 1)
player_data &amp;lt;- player_data %&amp;gt;%
  mutate(symmetric_position = gsub(&amp;quot;L|R&amp;quot;, &amp;quot;W&amp;quot;, position))

unique(player_data$symmetric_position)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;ST&amp;quot;   &amp;quot;GK&amp;quot;   &amp;quot;CAM&amp;quot;  &amp;quot;CDM&amp;quot;  &amp;quot;CB&amp;quot;   &amp;quot;WCAM&amp;quot; &amp;quot;CM&amp;quot;   &amp;quot;WM&amp;quot;   &amp;quot;CF&amp;quot;   &amp;quot;WWM&amp;quot; 
## [11] &amp;quot;WB&amp;quot;   &amp;quot;WWB&amp;quot;  &amp;quot;WCB&amp;quot;  &amp;quot;WS&amp;quot;   &amp;quot;WF&amp;quot;   &amp;quot;WAM&amp;quot;  &amp;quot;WCDM&amp;quot; &amp;quot;WCM&amp;quot;  &amp;quot;SW&amp;quot;   &amp;quot;WDM&amp;quot; 
## [21] &amp;quot;WW&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then want to use the attributes for each player at various skills (e.g. Shot Power, Ball Control, GK Rushing [out], Free Kicks,…) to work out how they interact with the palyer’s chosen position to create their overall ability score in the game.&lt;/p&gt;
&lt;p&gt;For example, in &lt;a href=&#34;https://www.fifaindex.com/player/158023/lionel-messi/fifa20/&#34;&gt;FIFA 2020, Lionel Messi&lt;/a&gt; has rather poor defensive stats (e.g. only 26/100 for sliding tackles). Any reasonable person would reognise that sliding tackles just &lt;em&gt;aren’t important&lt;/em&gt; for Lionel Messi’s role in the Barcelona team. However, we can use these stats to work out what his overall ability would be &lt;em&gt;if he were a defender&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#attribute variables we&amp;#39;ll need to use to work out player position ability
attribute_vars &amp;lt;- grep(&amp;quot;Ball_Control&amp;quot;, names(player_data)):
  grep(&amp;quot;GK_Rushing&amp;quot;, names(player_data))

names(player_data)[attribute_vars]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Ball_Control&amp;quot;       &amp;quot;Dribbling&amp;quot;          &amp;quot;Marking&amp;quot;           
##  [4] &amp;quot;Slide_Tackle&amp;quot;       &amp;quot;Stand_Tackle&amp;quot;       &amp;quot;Aggression&amp;quot;        
##  [7] &amp;quot;Reactions&amp;quot;          &amp;quot;Attack_Positioning&amp;quot; &amp;quot;Interceptions&amp;quot;     
## [10] &amp;quot;Vision&amp;quot;             &amp;quot;Crossing&amp;quot;           &amp;quot;Short_Pass&amp;quot;        
## [13] &amp;quot;Long_Pass&amp;quot;          &amp;quot;Acceleration&amp;quot;       &amp;quot;Stamina&amp;quot;           
## [16] &amp;quot;Strength&amp;quot;           &amp;quot;Balance&amp;quot;            &amp;quot;Sprint_Speed&amp;quot;      
## [19] &amp;quot;Agility&amp;quot;            &amp;quot;Jumping&amp;quot;            &amp;quot;Heading&amp;quot;           
## [22] &amp;quot;Shot_Power&amp;quot;         &amp;quot;Long_Shots&amp;quot;         &amp;quot;Finishing&amp;quot;         
## [25] &amp;quot;FK_Accuracy&amp;quot;        &amp;quot;Curve&amp;quot;              &amp;quot;Penalties&amp;quot;         
## [28] &amp;quot;Volleys&amp;quot;            &amp;quot;GK_Reflexes&amp;quot;        &amp;quot;GK_Handling&amp;quot;       
## [31] &amp;quot;GK_Positioning&amp;quot;     &amp;quot;GK_Diving&amp;quot;          &amp;quot;GK_Kicking&amp;quot;        
## [34] &amp;quot;Tackling&amp;quot;           &amp;quot;Anticipation&amp;quot;       &amp;quot;Composure&amp;quot;         
## [37] &amp;quot;Creativity&amp;quot;         &amp;quot;Passing&amp;quot;            &amp;quot;Long_Balls&amp;quot;        
## [40] &amp;quot;Pace&amp;quot;               &amp;quot;Shot_Accuracy&amp;quot;      &amp;quot;GK_Rushing&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll then run a &lt;a href=&#34;https://www.statisticshowto.datasciencecentral.com/lasso-regression/&#34;&gt;LASSO regression&lt;/a&gt; to calculate exactly how important each of these variables are to players of each position, and then use these weights to calculate the hypothetical ability of players in positions they would never play. For some more explanation, a lot of this is taken from some old blog posts &lt;a href=&#34;https://www.robert-hickman.eu/post/yorkshire_world_cup_2/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#function to do the lasso regression
get_player_position_abilities &amp;lt;- function(model_pos, model_vers) {
  #id players by their link to fifaindex
  ids &amp;lt;- player_data$player_link[player_data$version == model_vers]
  
  #train on players who play each position
  train_data &amp;lt;- player_data %&amp;gt;%
    filter(symmetric_position == model_pos &amp;amp; version == model_vers) %&amp;gt;%
    select(&amp;quot;ability&amp;quot;, attribute_vars) %&amp;gt;%
    mutate(ability = as.numeric(ability)) %&amp;gt;%
    #some variables aren&amp;#39;t in all versions of FIFA
    #get rid of any that are all NA
    purrr::discard(~all(is.na(.)))
  #if no examples of this position for a version of FIFA, return NULL
  if(length(train_data) == 0) return(NULL)
  #convert to a matrix and train the regression
  train_matrix &amp;lt;- model.matrix(ability~., train_data)
  cv_model &amp;lt;- cv.glmnet(train_matrix, train_data$ability)
  
  #use these weights on every player from that version of FIFA
  test_data &amp;lt;- player_data %&amp;gt;%
    filter(version == model_vers) %&amp;gt;%
    select(&amp;quot;ability&amp;quot;, attribute_vars) %&amp;gt;%
    mutate(ability = as.numeric(ability)) %&amp;gt;%
    purrr::discard(~all(is.na(.)))
  #calculate the ability score for each player for that position
  test_matrix &amp;lt;- model.matrix(ability~., test_data)
  position_ability &amp;lt;- predict(cv_model, newx = test_matrix, s = &amp;quot;lambda.min&amp;quot;, type=&amp;quot;response&amp;quot;)
  
  #return the positional scores
  df &amp;lt;- data.frame(
    player_link = ids,
    ability = as.numeric(position_ability),
    version = model_vers,
    position = model_pos
  )
  return(df)
}

#get all combinations of position and FIFA version
crossed_vars &amp;lt;- crossing(
  pos = unique(player_data$symmetric_position), 
  vers = unique(player_data$version)
)

#get all players ability in every position
position_abilities &amp;lt;- map2_df(crossed_vars$pos, crossed_vars$vers, get_player_position_abilities) %&amp;gt;%
  left_join(select(player_data, name = name2, day, month, player_link), by = &amp;quot;player_link&amp;quot;) %&amp;gt;%
  pivot_wider(names_from = position, values_from = ability) %&amp;gt;%
  select(-player_link)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So once we’ve run that we can see how each player is expected to perform in any position. For instance, if we take the first three players in the dataset we can see how Thierry Henry&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(position_abilities, n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 25
##   version name    day month   CAM    CB   CDM    CF    CM    GK    ST    SW
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 05      Thie…    17     8  88.8  53.1  70.9  96.5  76.4  24.2  96.5  55.2
## 2 05      Gian…    28     1  34.3  39.5  34.7  39.0  34.3  96.3  39.2  34.5
## 3 05      Zine…    23     6  96.1  72.1  86.8  93.9  91.1  26.7  93.9  75.2
## # … with 13 more variables: WAM &amp;lt;dbl&amp;gt;, WB &amp;lt;dbl&amp;gt;, WCAM &amp;lt;dbl&amp;gt;, WCB &amp;lt;dbl&amp;gt;,
## #   WCDM &amp;lt;dbl&amp;gt;, WCM &amp;lt;dbl&amp;gt;, WDM &amp;lt;dbl&amp;gt;, WF &amp;lt;dbl&amp;gt;, WM &amp;lt;dbl&amp;gt;, WS &amp;lt;dbl&amp;gt;,
## #   WW &amp;lt;dbl&amp;gt;, WWB &amp;lt;dbl&amp;gt;, WWM &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also plot the relative abilities of each player to see if they make sense. In the below I’ve excluded the names of each playey on the y axis to save space, but every slither is a separate player:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 &amp;lt;- position_abilities %&amp;gt;%
  #arrange ordering
  arrange(-ST) %&amp;gt;%
  filter(!duplicated(name)) %&amp;gt;%
  mutate(name = factor(name, levels = unique(name),)) %&amp;gt;%
  select(name, 5:ncol(.)) %&amp;gt;%
  #melt data
  pivot_longer(cols = c(2:ncol(.)), names_to = &amp;quot;position&amp;quot;, values_to = &amp;quot;ability&amp;quot;) %&amp;gt;%
  arrange(name, -ability) %&amp;gt;%
  mutate(position = factor(position, levels = unique(position))) %&amp;gt;%
  ggplot(aes(y = name, x = position)) +
  geom_tile(aes(fill = ability)) +
  labs(title = &amp;quot;Relative abilities of all players in all positions&amp;quot;,
       x = &amp;quot;position&amp;quot;,
       y = &amp;quot;player&amp;quot;) +
  theme_minimal() +
  #get rid of y axis text
  theme(axis.text.y = element_blank()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-14-birthdays_files/figure-html/plot_position_abilities-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And it’s clear that players that excel in the attacking positions towards the left are weaker at the defensive positions towards the right (also not the big section of dark blue for weakness in the goalkeepers column).&lt;/p&gt;
&lt;p&gt;In building a 5-a-side team, I’m going to assume you want at least one defencer, one midfielder, one attacker, one goalkeeper, and then one extra outfield player in whatever position. It’s important to note that this not have to be ‘player traditionally thought of as a defender’, a particularly skilled striker could very well take up the defensive space if they had the requisite abilities.&lt;/p&gt;
&lt;p&gt;To do this, we have to bin the positions into attack/defense and then find the highest value for each for every player&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gk_cols &amp;lt;- c(&amp;quot;GK&amp;quot;)
def_cols &amp;lt;- c(&amp;quot;CB&amp;quot;, &amp;quot;SW&amp;quot;, &amp;quot;WCB&amp;quot;, &amp;quot;CDM&amp;quot;, &amp;quot;WCDM&amp;quot;, &amp;quot;WDM&amp;quot;)
mid_cols &amp;lt;- c(&amp;quot;CM&amp;quot;, &amp;quot;WCM&amp;quot;, &amp;quot;CAM&amp;quot;, &amp;quot;WCAM&amp;quot;, &amp;quot;WM&amp;quot;, &amp;quot;WWM&amp;quot;, &amp;quot;WB&amp;quot;, &amp;quot;WWB&amp;quot;)
attack_cols &amp;lt;- c(&amp;quot;CF&amp;quot;, &amp;quot;WF&amp;quot;, &amp;quot;ST&amp;quot;, &amp;quot;WS&amp;quot;, &amp;quot;WAM&amp;quot;, &amp;quot;WW&amp;quot;)

#find the best defensive/attack position for each player
fiveaside_abilities &amp;lt;- map(list(gk_cols, def_cols, mid_cols, attack_cols),
               function(cols) position_abilities %&amp;gt;% select(cols) %&amp;gt;% apply(., 1, max, na.rm = TRUE)) %&amp;gt;%
  do.call(cbind, .) %&amp;gt;%
  as.data.frame() %&amp;gt;%
  #bind this back to the original data
  cbind(position_abilities, .) %&amp;gt;%
  #select the necessary columns
  select(name, version, gk = V1, def = V2, mid = V3, att = V4, day, month)

head(fiveaside_abilities)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  name version       gk      def      mid      att day
## 1       Thierry Henry      05 24.24627 70.91822 88.87479 96.60456  17
## 2    Gianluigi Buffon      05 96.29510 40.01513 39.58011 39.76021  28
## 3     Zinedine Zidane      05 26.66050 86.77503 96.06867 96.11257  23
## 4 Ruud van Nistelrooy      05 22.75526 75.99536 86.59128 94.70145   1
## 5          Roy Makaay      05 23.52925 65.63241 78.20789 93.82865   9
## 6       Iker Casillas      05 94.11531 54.33178 45.29751 51.61508  20
##   month
## 1     8
## 2     1
## 3     6
## 4     7
## 5     3
## 6     5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the player abilities, combining them into a team is not quite trivial, but not far off&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#melt data back down for team selection
team_selection_dat &amp;lt;- fiveaside_abilities %&amp;gt;%
  pivot_longer(cols = names(fiveaside_abilities)[3:6],
               names_to = &amp;quot;pos&amp;quot;, values_to = &amp;quot;ability&amp;quot;)

#fun on a function to select optimal five a side teams
best_teams &amp;lt;- 
  #run for each date we want to select for
  map_df(unique(paste(team_selection_dat$day, team_selection_dat$month, sep = &amp;quot;-&amp;quot;)), 
         function(select_dob, data) {
           #filter only players with that birth date
           bday_dat &amp;lt;- data %&amp;gt;%
             mutate(dob = paste(day, month, sep = &amp;quot;-&amp;quot;)) %&amp;gt;%
             filter(dob == select_dob) %&amp;gt;%
             arrange(-ability)
           
           #take positions in order of highest ability score
           #in order to pick optimally
           position_order &amp;lt;- unique(bday_dat$pos)
           
           #init a data frame
           team &amp;lt;- data.frame(
             name = NULL,
             version = NULL,
             day = NULL,
             month = NULL,
             pos = NULL,
             ability = NULL
           )
           
           #for loop through the positions to be picked
           #probably a better way to write this but
           #by now my brain was melting
           for(position in position_order) {
             #select the best player for that position
             selected_player &amp;lt;- bday_dat %&amp;gt;%
               filter(pos == position) %&amp;gt;%
               top_n(1, ability) %&amp;gt;%
               select(-dob)
             team &amp;lt;- rbind(team, selected_player)
             
             #remove selected player from later choices
             bday_dat &amp;lt;- bday_dat %&amp;gt;%
               filter(!name %in% team$name)
           }
           
           #pick the last last player
           team &amp;lt;- bday_dat %&amp;gt;%
             filter(pos != &amp;quot;gk&amp;quot;) %&amp;gt;%
             top_n(1, ability) %&amp;gt;%
             select(-dob) %&amp;gt;%
             rbind(team, .)
           
           return(team)
  }, data = team_selection_dat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then plot the best teams by taking the mean of each teams positional ability and finding the top 10 teams. I then plotted these on half pitches using Ben Torvaney’s (mentoned in 2/2 posts so far…) &lt;a href=&#34;https://github.com/Torvaney/ggsoccer&#34;&gt;ggsoccer&lt;/a&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p4 &amp;lt;- best_teams %&amp;gt;%
  #work out total ability by team
  group_by(day, month) %&amp;gt;%
  mutate(team_ability = mean(ability)) %&amp;gt;%
  group_by(day, month, pos) %&amp;gt;%
  mutate(total_pos = n(), pos_n = 1:n()) %&amp;gt;%
  #calculate the x and y coordinates for each player on a pitch
  mutate(x = case_when(
    pos == &amp;quot;gk&amp;quot; ~ 5,
    pos == &amp;quot;def&amp;quot; ~ 22,
    pos == &amp;quot;mid&amp;quot; ~ 35,
    pos == &amp;quot;att&amp;quot; ~ 52
  )) %&amp;gt;%
  mutate(y = case_when(
    pos_n == 1 &amp;amp; total_pos == 2 ~ 20,
    pos_n == 2 ~ 60,
    TRUE ~ 40
  )) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(-pos_n, -total_pos) %&amp;gt;%
  #take the 10 best teams
  top_n(50, team_ability) %&amp;gt;%
  #add in a column for the faceting
  mutate(dob = paste0(day, &amp;quot;/&amp;quot;, month, &amp;quot;: &amp;quot;, round(team_ability, 2))) %&amp;gt;%
  ggplot(aes(x = x, y = y)) +
  annotate_pitch(dimensions = pitch_statsbomb,
                 colour = &amp;quot;black&amp;quot;,
                 fill   = &amp;quot;white&amp;quot;,
                 limits = FALSE) +
  coord_flip(xlim = c(0, 60)) +
  geom_text(aes(
    label = gsub(&amp;quot;( )([A-Z])&amp;quot;, &amp;quot;\n\\2&amp;quot;, paste(name, version, sep = &amp;quot;-&amp;quot;)),
    colour = ability), size = 5.5) +
  scale_colour_gradient(low = &amp;quot;darkblue&amp;quot;, high = &amp;quot;red&amp;quot;, name = &amp;quot;player\n ability&amp;quot;) +
  labs(title = &amp;quot;Ten Best Birthday Teams&amp;quot;) +
  theme_pitch() +
  theme(strip.text.x = element_text(size = 14)) +
  facet_wrap(~dob) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/birthday_teams.svg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All the top 10 teams have fairly similar total abilities- around 86-87. These best of which is an average of 87.51 for a team of
- 2006 Dida (GK)
- 2005 Sami Hyypia (Def)
- 2005 Gilberto Silva (Mid)
- 2005 Santiago Solari (Att)
- 2017 Diego Costa (Att)&lt;/p&gt;
&lt;p&gt;who all share a birthday on the 7th October. Many of the top teams we found earlier also show up, though surprisingly the 1st November which has players such as Neymar Jr., Christiano Ronaldo, Carlos Tevez, and Stefan De Vrij, doesn’t make the cut.&lt;/p&gt;
&lt;p&gt;That’s all for the second of these posts. The first one can be found &lt;a href=&#34;https://www.robert-hickman.eu/post/five_min_trivia_invincibles/&#34;&gt;here&lt;/a&gt;. Hopefully it provides some relief from the madness that is a complete lack of football. Stay safe, and wash your hands.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five Minute Football Trivia - Invincibles</title>
      <link>/post/five_min_trivia_invincibles/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/five_min_trivia_invincibles/</guid>
      <description>


&lt;p&gt;&lt;em&gt;generally as I have less and less time to waste on meaningless football stats I get halfway through a post and abandon it. To remedy this, I want to start pushing out posts that give a reasonable half-guess at an answer within an hour or so without needing to really check my working or write good prose. This is the first of these&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Liverpool Football Club have had a pretty impressive season until recently, winning &lt;a href=&#34;https://www.google.com/search?client=firefox-b-d&amp;amp;q=premier+league+table#sie=lg;/g/11fj6snmjm;2;/m/02_tc;st;fp;1;;&#34;&gt;26 of the first 27 games&lt;/a&gt; and remaining unbeaten. Last weekend however, they lost &lt;a href=&#34;https://www.bbc.co.uk/sport/football/51595064&#34;&gt;3-0 to Watford&lt;/a&gt; which means that Arsenal remain the only team to have gone a full (modern) season of top flight English football unbeaten (in &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Invincibles_(football)&#34;&gt;2003/2004&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Modern football twitter being what it is, a lot of debate has sprung up about which would be more impressive- going to whole season unbeaten like Arsenal, or winning 100 (out of a max 114) points in a single season, as Manchester City did in 2017-2018 and both Manchester City and Liverpool &lt;em&gt;almost&lt;/em&gt; did last season. (A third option also is the treble won by Manchester United in &lt;a href=&#34;https://en.wikipedia.org/wiki/1998%E2%80%9399_Manchester_United_F.C._season&#34;&gt;1998/1999&lt;/a&gt; but since Liverpool have also lost to Chelsea in the FA cup this week, that too remains unbeaten).&lt;/p&gt;
&lt;p&gt;As usual, first we need some libraries&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#munging
library(tidyverse)
#plotting
library(ggrepel)
#football data
library(engsoccerdata)
library(rvest)
#Ben Torvaney&amp;#39;s excellend package to model football
library(regista)

#set seed for reproducibility
set.seed(22081992)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can get going loading up the data on English football results up until the end of the 2018/2019 season. We’ll also take some time to find the winners each season which will be useful later. There’s a lot of repetitive munging in this post so bear in mind the 3 main things we’ll be doing are:
+ pivoting data to longer to get the results for each team (not each match)
+ working out the goals for and against each team using case_when()
+ working out the points for each team using case_when()&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- engsoccerdata::england %&amp;gt;%
  #only care about the top flight in the premier league era
  dplyr::filter(Season &amp;gt; 1991 &amp;amp; Season &amp;lt; 2019 &amp;amp; division == 1) %&amp;gt;%
  select(season = Season, home, away = visitor, hgoal, agoal = vgoal)

league_winners &amp;lt;- data %&amp;gt;%
  #pivot data to longer to get team (rather than match) data
  pivot_longer(c(&amp;quot;home&amp;quot;, &amp;quot;away&amp;quot;), names_to = &amp;quot;location&amp;quot;, values_to = &amp;quot;team&amp;quot;) %&amp;gt;%
  #find goals for and goals against per team
  mutate(g_for = case_when(
    location == &amp;quot;home&amp;quot; ~ hgoal,
    location == &amp;quot;away&amp;quot; ~ agoal
  )) %&amp;gt;%
  mutate(g_ag = case_when(
    location == &amp;quot;home&amp;quot; ~ agoal,
    location == &amp;quot;away&amp;quot; ~ hgoal
  )) %&amp;gt;%
  #get the team&amp;#39;s points per match
  mutate(points = case_when(
    g_for &amp;gt; g_ag ~ 3,
    g_for == g_ag ~ 1,
    g_ag &amp;gt; g_for ~ 0
  )) %&amp;gt;%
  mutate(gd = g_for - g_ag) %&amp;gt;%
  group_by(team, season) %&amp;gt;%
  #calculate total points and goal difference
  summarise(total_points = sum(points),
            total_gd = sum(gd)) %&amp;gt;%
  #get the winners of each league season
  arrange(season, -total_points, -total_gd) %&amp;gt;%
  group_by(season) %&amp;gt;%
  mutate(league_position = 1:n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(winner = case_when(
    league_position == 1 ~ &amp;quot;y&amp;quot;,
    TRUE ~ &amp;quot;n&amp;quot;
  ))

head(league_winners)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   team                season total_points total_gd league_position winner
##   &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; 
## 1 Manchester United     1992           84       36               1 y     
## 2 Aston Villa           1992           74       17               2 n     
## 3 Norwich City          1992           72       -4               3 n     
## 4 Blackburn Rovers      1992           71       22               4 n     
## 5 Queens Park Rangers   1992           63        8               5 n     
## 6 Liverpool             1992           59        7               6 n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then use the match data to calculate the offensive and defensive strength of each teams over the whole season using the &lt;a href=&#34;https://rss.onlinelibrary.wiley.com/doi/pdf/10.1111/1467-9876.00065&#34;&gt;Dixon-Coles method&lt;/a&gt;. I’ve previously written an introduction to this method &lt;a href=&#34;https://www.robert-hickman.eu/post/dixon_coles_1/&#34;&gt;here&lt;/a&gt; (which I need to finish part two of) but suffice to say it takes the goals scored and goals conceded per game and gives a good estimation of how good a team is. It’s similar in concept to &lt;a href=&#34;https://projects.fivethirtyeight.com/soccer-predictions/&#34;&gt;fivethirtyeight’s Soccer SPI&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#split data by seasons
fit_data &amp;lt;- data %&amp;gt;%
  split(f = .$season) %&amp;gt;%
  lapply(., function(x) x %&amp;gt;% mutate(home = factor(home), away = factor(away)))

#model using dixoncoles() from the regista package
fits &amp;lt;- lapply(fit_data, function(x) dixoncoles(hgoal, agoal, home, away, x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then extract the parameters from this model to see how teams have performed in each season of the Premier League. I also flip the defence axis (higher being a better defence) as I think it makes a little more sense&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parameters &amp;lt;- fits %&amp;gt;%
  #extract the team parameters per fit
  lapply(., function(f) {
    par_data &amp;lt;- f$par[grepl(&amp;quot;def_|off_&amp;quot;, names(f$par))]
    teams &amp;lt;- unique(gsub(&amp;quot;def_*|off_*&amp;quot;, &amp;quot;&amp;quot;, names(par_data)))
    par_df &amp;lt;- matrix(par_data, ncol = 2) %&amp;gt;%
      as.data.frame() %&amp;gt;%
      rename(attack = V1, defence = V2)
    rownames(par_df) &amp;lt;- teams
    return(par_df)
  }) %&amp;gt;%
  do.call(rbind, .) %&amp;gt;%
  rownames_to_column() %&amp;gt;%
  separate(rowname, c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;), sep = &amp;quot;\\.&amp;quot;) %&amp;gt;%
  mutate(season = as.numeric(season)) %&amp;gt;%
  #flip the defence parameter (higher = better)
  mutate(defence = defence * -1) %&amp;gt;%
  left_join(., league_winners, by = c(&amp;quot;season&amp;quot;, &amp;quot;team&amp;quot;))

#plot the parameters with season performance (points) as the colour
p1 &amp;lt;- parameters %&amp;gt;%
  ggplot(aes(x = attack, y = defence, fill = total_points, colour = winner)) +
  geom_point(shape = 21, size = 3, alpha = 0.7, stroke = 2) +
  #label exceptional teams
  geom_text_repel(data = filter(parameters, winner == 1 | attack + defence &amp;gt; 1),
            aes(label = paste(team, season))) +
  labs(title = &amp;quot;Dixon Coles parameters per team per Premier League Season&amp;quot;,
       subtitle = &amp;quot;league winners and exceptional teams labelled&amp;quot;,
       x = &amp;quot;attacking strength&amp;quot;,
       y = &amp;quot;defensive strength&amp;quot;) +
  scale_colour_manual(values = c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) +
  theme_minimal()

p1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-04-invincibles_files/figure-html/get_dc_parameters-1.png&#34; width=&#34;1152&#34; /&gt;
We can then use these parameters as ‘true estimates’ of how good each team was each season, and go back and simulate results from each match to work out how likely a win/lose/draw for any team was in any match. This is questionably a good idea but as I said up top, this is stream of consciousness first-guesses at answering stupid trivia questions so I’m going to go along with it.&lt;/p&gt;
&lt;p&gt;The regista package’s augment.dixoncoles easily gives us the chance of a win/lose/draw per match based on the attacking/defensive strength of each team (see above) that season&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#split the matches by season
matches &amp;lt;- data %&amp;gt;%
  select(season, home, away) %&amp;gt;%
  split(f = .$season)

#function to predict the results per match
predict_matches &amp;lt;- function(dc_fit, fixtures) {
  augment.dixoncoles(x = dc_fit, newdata = fixtures, type = &amp;quot;outcomes&amp;quot;) %&amp;gt;% 
    unnest() %&amp;gt;%
    spread(outcome, prob)
}

#run the prediction function
predictions &amp;lt;- map2_df(fits, matches,
                       predict_matches)

head(predictions)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   season home    away             away_win  draw home_win
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1   1992 Arsenal Aston Villa         0.294 0.379    0.327
## 2   1992 Arsenal Blackburn Rovers    0.319 0.344    0.337
## 3   1992 Arsenal Chelsea             0.220 0.342    0.437
## 4   1992 Arsenal Coventry City       0.214 0.333    0.454
## 5   1992 Arsenal Crystal Palace      0.188 0.322    0.490
## 6   1992 Arsenal Everton             0.223 0.338    0.439&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So e.g. based on Dixon-Coles estimates, given how well Arsenal and Aston Villa did over the &lt;em&gt;whole&lt;/em&gt; of the 1992/1993 season, Arsenal had a 32.6% chance of beating Aston Villa at home on the opening day of the season.&lt;/p&gt;
&lt;p&gt;We can then use these probability estimates to calculate the chance of any one team going unbeaten over the whole league (multiply out the probabilities of not losing each game)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;invincible_chance &amp;lt;- predictions %&amp;gt;%
  #get match predictions per team
  pivot_longer(c(&amp;quot;home&amp;quot;, &amp;quot;away&amp;quot;), names_to = &amp;quot;location&amp;quot;, values_to = &amp;quot;team&amp;quot;) %&amp;gt;%
  mutate(nonloss_chance = case_when(
    location == &amp;quot;home&amp;quot; ~ 1 - away_win,
    location == &amp;quot;away&amp;quot; ~ 1 - home_win
  )) %&amp;gt;%
  select(season, team, nonloss_chance) %&amp;gt;%
  group_by(team, season) %&amp;gt;%
  #chance of going invincible = product sum of chance of not drawing
  summarise(invincible_chance = prod(nonloss_chance)) %&amp;gt;%
  arrange(-invincible_chance)

head(invincible_chance, n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
## # Groups:   team [6]
##    team              season invincible_chance
##    &amp;lt;chr&amp;gt;              &amp;lt;int&amp;gt;             &amp;lt;dbl&amp;gt;
##  1 Chelsea             2004           0.0494 
##  2 Manchester City     2017           0.0362 
##  3 Manchester City     2018           0.0286 
##  4 Liverpool           2018           0.0232 
##  5 Arsenal             1998           0.0164 
##  6 Manchester City     2011           0.0124 
##  7 Manchester United   2007           0.0123 
##  8 Tottenham Hotspur   2016           0.00846
##  9 Arsenal             2003           0.00529
## 10 Chelsea             2009           0.00475&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it turns out that the team most likely to have gone invincible over a whole season was Chelsea in 2004/2005 (not surprising given their &lt;a href=&#34;https://en.wikipedia.org/wiki/2004%E2%80%9305_Chelsea_F.C._season#Results_by_round&#34;&gt;excellent defensive record that year&lt;/a&gt;), but with only a ~5% chance.&lt;/p&gt;
&lt;p&gt;Arsenal’s &lt;em&gt;actual&lt;/em&gt; invincible year is estimated that have had a 0.05% chance based on the team’s results (surprisingly low!). Another notable team is Tottenham Hotspur who only finished 2nd in 2016/2017 but perhaps went under the radar as a very good team that year (with a 0.08% chance of finishing unbeaten).&lt;/p&gt;
&lt;p&gt;So we can assume* that the very best ‘unbeatable’ teams have ~5% chance of finishing a season invincible. We can use this baseline to see how hard this seems compared to the expectation a team gets 100 points.&lt;/p&gt;
&lt;p&gt;*not really, but for this post yes&lt;/p&gt;
&lt;p&gt;We’re going to simulate every Premier League season 1000 times and calculate the total points expected of a team based on their Dixon-Coles parameters. To narrow down the search a bit, I’m going to limit it to only exceptional teams with an attack and defence parameter &amp;gt; 0.25 (which gives 33 season-teams).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result_probs &amp;lt;- predictions %&amp;gt;%
  #pivoting and case_when to get result probabilities per team
  pivot_longer(c(&amp;quot;home&amp;quot;, &amp;quot;away&amp;quot;), names_to = &amp;quot;location&amp;quot;, values_to = &amp;quot;team&amp;quot;) %&amp;gt;%
  mutate(win = case_when(
    location == &amp;quot;home&amp;quot; ~ home_win,
    location == &amp;quot;away&amp;quot; ~ away_win
  )) %&amp;gt;%
  mutate(lose = 1 - draw - win) %&amp;gt;%
  select(season, team, win, lose, draw) %&amp;gt;%
  group_by(team, season) %&amp;gt;%
  mutate(game = 1:n()) %&amp;gt;%
  nest(probs = c(win, lose, draw))

#filter down to only the very best teams to save processing
selected_teams &amp;lt;- parameters %&amp;gt;%
  filter(attack &amp;gt; 0.25 &amp;amp; defence &amp;gt; 0.25) %&amp;gt;%
  select(season, team) %&amp;gt;%
  left_join(., result_probs, by = c(&amp;quot;team&amp;quot;, &amp;quot;season&amp;quot;))

sim_result &amp;lt;- function(probabilities) {
  chosen_results &amp;lt;- gather(probabilities) %&amp;gt;%
    sample_n(., 1, weight = value)
  result &amp;lt;- chosen_results$key
}

simulate_all_games &amp;lt;- function(data) {
  data$result &amp;lt;- unlist(lapply(data$probs, sim_result))
  return(data)
}

#will simulate 1000 seasons for each of these teams
n_sims &amp;lt;- 1000

#run simulations - will take ~10mins
simulated_results &amp;lt;- rerun(n_sims, simulate_all_games(selected_teams))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating the total points won per season, we can work out the percentage of simulations in which each team exceed 100 points quite easily&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simulated_points &amp;lt;- simulated_results %&amp;gt;%
  #for each sim, get the points won by each team
  lapply(., function(data) {
    data &amp;lt;- data %&amp;gt;%
      mutate(points = case_when(
        result == &amp;quot;win&amp;quot; ~ 3,
        result == &amp;quot;draw&amp;quot; ~ 1,
        result == &amp;quot;lose&amp;quot; ~ 0
      )) %&amp;gt;%
      group_by(season, team) %&amp;gt;%
      mutate(total_points = sum(points)) %&amp;gt;%
      select(season, team, total_points) %&amp;gt;%
      unique()
  }) %&amp;gt;%
  do.call(rbind, .)

#probability of reaching 100 points is no. of sims &amp;gt; 100 points / n_sims
centurion_probs &amp;lt;- simulated_points %&amp;gt;%
  filter(total_points &amp;gt; 99) %&amp;gt;%
  group_by(season, team) %&amp;gt;%
  summarise(centurion_prob = n() / n_sims) %&amp;gt;%
  arrange(-centurion_prob)

print(centurion_probs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 27 x 3
## # Groups:   season [16]
##    season team              centurion_prob
##     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                      &amp;lt;dbl&amp;gt;
##  1   2017 Manchester City            0.17 
##  2   2018 Manchester City            0.107
##  3   2018 Liverpool                  0.076
##  4   1994 Manchester United          0.069
##  5   2004 Chelsea                    0.046
##  6   2009 Chelsea                    0.039
##  7   2011 Manchester City            0.029
##  8   2007 Manchester United          0.023
##  9   2016 Tottenham Hotspur          0.023
## 10   2006 Manchester United          0.011
## # … with 17 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, the two recent Manchester City teams come top, with the one that actually did reach 100 points (2017) given a 14.5% chance of reaching that milestone, given their strength.&lt;/p&gt;
&lt;p&gt;So now we have a baseline that the best team at accumulating points (Manchester City 2017/2018) has ~3x as much chance of winning 100 points in that season than the very best (potentially) invincible team (Chelsea 2004/2005). I.e. we have some (not super strong) evidence that it is ~3x as hard to go a season unbeaten than it is to become a ‘centurion’.&lt;/p&gt;
&lt;p&gt;We can calculate how many points our threshold needs to be set at to have an equal chance using top_frac() on our 1000 simulations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#find the points threshold for Man City 2017 that would reach n points 
#as often as Chelsea 2004 would go unbeaten
invincible_equivalent &amp;lt;- simulated_points %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(season == 2017 &amp;amp; team == &amp;quot;Manchester City&amp;quot;) %&amp;gt;%
  top_frac(max(invincible_chance$invincible_chance)) %&amp;gt;%
  arrange(total_points)

#print the lowest threshold
head(invincible_equivalent, n = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   season team            total_points
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1   2017 Manchester City          103&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we might presume that the equivalent achievement to going the season unbeaten is to win 103 points in the Premier League. To see how the 2017/2018 Manchester City team compare to this we can plot the expected final points total of that season (given league team strengths) in a histogram:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2 &amp;lt;-  simulated_points %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(season == 2017 &amp;amp; team == &amp;quot;Manchester City&amp;quot;) %&amp;gt;%
  ggplot(., aes(x = total_points)) +
  geom_histogram(fill = &amp;quot;skyblue&amp;quot;, alpha = 0.7) +
  #invincle equivalent achievement in red
  geom_vline(xintercept = min(invincible_equivalent$total_points),
             colour = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 2) +
  #actual achievement in blue
  geom_vline(xintercept = filter(league_winners, season == 2017 &amp;amp; league_position == 1)$total_points,
             colour = &amp;quot;blue&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 2) +
  labs(title = &amp;quot;Man C. expected 2017/2018 performance c.f. invincible equivalent threshold&amp;quot;,
       subtitle = &amp;quot;invincible equivalent achievement = 103 points, actual = 100 points&amp;quot;,
       x = &amp;quot;season expected total points&amp;quot;,
       y = paste(&amp;quot;times achieved over&amp;quot;, n_sims, &amp;quot;simulations&amp;quot;)) +
  theme_minimal()

p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-04-invincibles_files/figure-html/plot_threshold-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The original question was really if this years Liverpool team might achieve this 103 point threshold (given they have now failed to go unbeaten). We can test this by doing exactly the same procedure on their season so far.&lt;/p&gt;
&lt;p&gt;First we need to download all the match data from fbref. Handily, fbref doesn’t just gives us the goals scored per match but the &lt;a href=&#34;https://fbref.com/en/expected-goals-model-explained/&#34;&gt;&lt;em&gt;expected goals&lt;/em&gt;&lt;/a&gt; each team managed to put up. We’re going to use that to model team strengths as we might assume* this is a better measure of how good a team really is. In order to fit the model using the regista package I need to supply an integer, so I’ve simply rounded those xG numbers to the nearest whole number**&lt;/p&gt;
&lt;p&gt;*lets ignore game state and other such important thing- this is &lt;em&gt;five minute&lt;/em&gt; football trivia
**you actually can use expected goals in a regista::dixoncoles model, see &lt;a href=&#34;https://www.robert-hickman.eu/post/wsl-prediction-1/&#34;&gt;here&lt;/a&gt;, but this is &lt;em&gt;five minute&lt;/em&gt; football trivia&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#download the match data from 2019/2020
fixtures_2020 &amp;lt;- &amp;quot;https://fbref.com/en/comps/9/schedule/Premier-League-Fixtures&amp;quot; %&amp;gt;%
  read_html() %&amp;gt;%
  html_nodes(&amp;quot;#sched_ks_3232_1&amp;quot;) %&amp;gt;%
  html_table() %&amp;gt;%
  as.data.frame() %&amp;gt;%
  separate(Score, into = c(&amp;quot;hgoal&amp;quot;, &amp;quot;agoal&amp;quot;), sep = &amp;quot;–&amp;quot;) %&amp;gt;%
  #only care about goals and expected goals
  select(home = Home, away = Away, home_xg = xG, away_xg = xG.1, hgoal, agoal) %&amp;gt;%
  filter(home != &amp;quot;&amp;quot;) %&amp;gt;%
  mutate(home = factor(home), away = factor(away)) %&amp;gt;%
  #round expected goals to nearest integer
  mutate_at(c(&amp;quot;home_xg&amp;quot;, &amp;quot;away_xg&amp;quot;, &amp;quot;hgoal&amp;quot;, &amp;quot;agoal&amp;quot;), .funs = funs(round(as.numeric(.))))

#matches with a known result
#used for modelling
played_matches &amp;lt;- fixtures_2020 %&amp;gt;%
  filter(!is.na(home_xg))

#matches with an unknown result
#used for simulation
unplayed_matches &amp;lt;- fixtures_2020 %&amp;gt;%
  filter(is.na(home_xg)) %&amp;gt;%
  select_if(negate(is.numeric))

#fit the dixon coles model
fit_2020 &amp;lt;- dixoncoles(home_xg, away_xg, home, away, data = played_matches)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And as before we can plot the team strength in attacking and defending dimensions&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#extract parameters from the model
pars_2020 &amp;lt;- fit_2020$par %&amp;gt;%
  .[grepl(&amp;quot;def_|off_&amp;quot;, names(.))] %&amp;gt;%
  matrix(., ncol = 2) %&amp;gt;%
  as.data.frame() %&amp;gt;%
  rename(attack = V1, defence = V2)
pars_2020$team &amp;lt;- unique(gsub(&amp;quot;def_*|off_*&amp;quot;, &amp;quot;&amp;quot;, names(fit_2020$par)))[1:20]

#plot as before
p3 &amp;lt;- pars_2020 %&amp;gt;%
  mutate(defence = 1 - defence) %&amp;gt;%
  ggplot(aes(x = attack, y = defence, colour = attack + defence, label = team)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_text_repel() +
  labs(title = &amp;quot;Dixon Coles parameters per team 2019/2020&amp;quot;,
       x = &amp;quot;attacking strength&amp;quot;,
       y = &amp;quot;defensive strength&amp;quot;) +
  scale_colour_continuous(guide = FALSE) +
  labs(title = &amp;quot;Dixon Coles parameters per team for the 2019/2020 Premier League Season&amp;quot;,
       x = &amp;quot;attacking strength&amp;quot;,
       y = &amp;quot;defensive strength&amp;quot;) +
  theme_minimal()

p3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-04-invincibles_files/figure-html/2020_dc_parameters-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, a distant 2nd place Manchester City actually rate higher than Liverpool using this model, and Manchester United (by all accounts having a very middling season) aren’t far off either.&lt;/p&gt;
&lt;p&gt;Now we just need to simulate the remaining games of Liverpool’s season to see how likely they are to hit are 103 points target. We can then add the points we expect Liverpool to win to the number of points we know they already have to get an estimate of final total points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#calculate points we know Liverpool have
liverpool_points &amp;lt;- played_matches %&amp;gt;%
  filter(home == &amp;quot;Liverpool&amp;quot; | away == &amp;quot;Liverpool&amp;quot;) %&amp;gt;%
  mutate(points = case_when(
    hgoal == agoal ~ 1,
    home == &amp;quot;Liverpool&amp;quot; &amp;amp; (hgoal &amp;gt; agoal) ~ 3,
    away == &amp;quot;Liverpool&amp;quot; &amp;amp; (agoal &amp;gt; hgoal) ~ 3,
    TRUE ~ 0
  )) %&amp;gt;%
  summarise(total_points = sum(points))

#estimate the chance of results in all remaining games
unplayed_results &amp;lt;-
  augment.dixoncoles(fit_2020, unplayed_matches, type.predict = &amp;quot;outcomes&amp;quot;) %&amp;gt;%
  unnest() %&amp;gt;%
  #filter out the liverpool ones
  filter(home == &amp;quot;Liverpool&amp;quot; | away == &amp;quot;Liverpool&amp;quot;)

#function to simulate a season by making weighted samples
simulate_season &amp;lt;- function(result_probabilities) {
  result_probabilities %&amp;gt;%
    nest(outcome, prob, .key = &amp;quot;results&amp;quot;) %&amp;gt;%
    mutate(sampled = map(results, ~ sample_n(., 1, weight = prob))) %&amp;gt;%
    select(-results) %&amp;gt;%
    unnest()
}

#simulate the rest of liverpool&amp;#39;s season
liverpool_2020_simulated &amp;lt;- rerun(n_sims, simulate_season(unplayed_results)) %&amp;gt;%
  bind_rows(.id = &amp;quot;simulation_id&amp;quot;) %&amp;gt;%
  #find the sampled points won per game
  mutate(points = case_when(
    home == &amp;quot;Liverpool&amp;quot; &amp;amp; outcome == &amp;quot;home_win&amp;quot; ~ 3,
    away == &amp;quot;Liverpool&amp;quot; &amp;amp; outcome == &amp;quot;away_win&amp;quot; ~ 3,
    outcome == &amp;quot;draw&amp;quot; ~ 1,
    TRUE ~ 0
  )) %&amp;gt;%
  group_by(simulation_id) %&amp;gt;%
  #calculate Liverpool&amp;#39;s total season points for this simulation
  summarise(total_points = sum(points) + as.numeric(liverpool_points))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s then very easy to find the fraction of sims in which Liverpool break this 103 point challenge&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(which(liverpool_2020_simulated$total_points &amp;gt; 102)) / 1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.157&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can plot it as before to see how many points we expect Liverpool to win this season:
(this time the 103 point threshold is in blue to stand out against the red that Liverpool play in)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p4 &amp;lt;- liverpool_2020_simulated %&amp;gt;%
  ggplot(., aes(x = total_points)) +
  geom_histogram(fill = &amp;quot;red&amp;quot;, alpha = 0.7) +
  #invincle equivalent achievement in red
  geom_vline(xintercept = min(invincible_equivalent$total_points),
             colour = &amp;quot;blue&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 2) +
  labs(title = &amp;quot;Liverpool&amp;#39;s expected 2019/2020 performance c.f. invincible equivalent threshold&amp;quot;,
       subtitle = &amp;quot;invincible equivalent achievement = 103 points in blue this time&amp;quot;,
       x = &amp;quot;season expected total points&amp;quot;,
       y = paste(&amp;quot;times achieved over&amp;quot;, n_sims, &amp;quot;simulations&amp;quot;)) +
  theme_minimal()

p4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-04-invincibles_files/figure-html/plot_liverpool_expectation-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Anyway, that’s that for the first of these (hopefully? of many!). Did we learn anything? probably not. But did we at least do something interesting? also probably not. But I do like doing these silly little analyses in my spare time and by not limiting myself to things like rigor, I can pump them out faster. I’ll probably aim for one post (smaller than this) a week to start building a little bit of a public portfolio up again (I’m unemployed in 5 months- hire me!!). Hope you enjoyed reading it :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
