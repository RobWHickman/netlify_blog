<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Robert Hickman</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Robert Hickman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 17 Nov 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/r/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Racing Bar Charts and Some Gnarly data.table Munging</title>
      <link>/post/racing_bar_charts/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/racing_bar_charts/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gganimate)
library(tweenr)
library(stringi)
library(countrycode)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read in data from blog repo
city_data &amp;lt;- read.csv(&amp;quot;https://raw.githubusercontent.com/RobWHickman/netlify_blog/race_bar_charts/static/files/racing_bar_charts/city_populations.csv&amp;quot;, 
                 encoding = &amp;quot;UTF-8&amp;quot;, stringsAsFactors = FALSE)

head(city_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Country.Code Country.or.area City.Code               Urban.Agglomeration
## 1          392           Japan     21671                             Tokyo
## 2          356           India     21228                             Delhi
## 3          156           China     20656                          Shanghai
## 4           76          Brazil     20287                      S&amp;lt;e3&amp;gt;o Paulo
## 5          356           India     21206                   Mumbai (Bombay)
## 6          484          Mexico     21853 Ciudad de M&amp;lt;e9&amp;gt;xico (Mexico City)
##   Note  Latitude Longitude  X1950  X1955  X1960  X1965  X1970  X1975
## 1  325  35.68950 139.69171 11,275 13,713 16,679 20,284 23,298 26,615
## 2  318  28.66667  77.21667  1,369  1,782  2,283  2,845  3,531  4,426
## 3  202  31.22000 121.46000  4,301  5,846  6,820  6,428  6,036  5,627
## 4   NA -23.55000 -46.64000  2,334  3,044  3,970  5,494  7,620  9,614
## 5   NA  19.07398  72.88084  2,857  3,432  4,060  4,854  5,811  7,082
## 6  330  19.42732 -99.14187  3,365  4,294  5,479  6,969  8,831 10,734
##    X1980  X1985  X1990  X1995  X2000  X2005  X2010  X2015  X2020  X2025
## 1 28,549 30,304 32,530 33,587 34,450 35,622 36,834 38,001 38,323 37,876
## 2  5,558  7,325  9,726 12,407 15,732 18,670 21,935 25,703 29,348 32,727
## 3  5,966  6,847  7,823 10,450 13,959 16,763 19,980 23,741 27,137 29,442
## 4 12,089 13,395 14,776 15,913 17,014 18,288 19,660 21,066 22,119 22,899
## 5  8,658 10,391 12,436 14,310 16,367 17,891 19,422 21,043 22,838 25,207
## 6 13,028 14,278 15,642 17,017 18,457 19,276 20,132 20,999 21,868 22,916
##    X2030
## 1 37,190
## 2 36,060
## 3 30,751
## 4 23,444
## 5 27,797
## 6 23,865&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;city_data &amp;lt;- city_data %&amp;gt;%
  #select out relevant columns
  select(country_id = Country.Code, country = Country.or.area,
         city_id = City.Code, city = Urban.Agglomeration,
         X1950, X1955, X1960, X1965, X1970, X1975, X1980, X1985, X1990,
         X1995, X2000, X2005, X2010, X2015, X2020, X2025, X2030) %&amp;gt;%
  #melt the data to long format
  reshape2::melt(id.vars = c(&amp;quot;country_id&amp;quot;, &amp;quot;country&amp;quot;, &amp;quot;city_id&amp;quot;, &amp;quot;city&amp;quot;),
                 variable.name = &amp;quot;year&amp;quot;, value.name = &amp;quot;population&amp;quot;) %&amp;gt;%
  #conver the data into usuable numbers
  mutate(year = as.numeric(gsub(&amp;quot;^X&amp;quot;, &amp;quot;&amp;quot;, year)),
         population = as.numeric(gsub(&amp;quot;,&amp;quot;, &amp;quot;&amp;quot;, population)),
         #convert the text into utf-8 readable
         city = stri_trans_general(city, &amp;quot;latin-ascii&amp;quot;)) %&amp;gt;%
  #extract the english names for cities
  mutate(city_name = case_when(
    grepl(&amp;quot;\\(&amp;quot;, city) ~ str_extract(city,  &amp;quot;(?&amp;lt;=\\().+?(?=\\))&amp;quot;),
    grepl(&amp;quot;-&amp;quot;, city) ~ gsub(&amp;quot;-.*&amp;quot;, &amp;quot;&amp;quot;, city),
    TRUE ~ as.character(city)
  ))

head(city_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   country_id country city_id                                  city year
## 1        392   Japan   21671                                 Tokyo 1950
## 2        356   India   21228                                 Delhi 1950
## 3        156   China   20656                              Shanghai 1950
## 4         76  Brazil   20287                      S&amp;lt;U+FFFD&amp;gt;o Paulo 1950
## 5        356   India   21206                       Mumbai (Bombay) 1950
## 6        484  Mexico   21853 Ciudad de M&amp;lt;U+FFFD&amp;gt;xico (Mexico City) 1950
##   population        city_name
## 1      11275            Tokyo
## 2       1369            Delhi
## 3       4301         Shanghai
## 4       2334 S&amp;lt;U+FFFD&amp;gt;o Paulo
## 5       2857           Bombay
## 6       3365      Mexico City&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;city_data &amp;lt;- city_data %&amp;gt;%
  #group by and find order at any point
  group_by(year) %&amp;gt;%
  arrange(-population) %&amp;gt;%
  mutate(order = row_number()) %&amp;gt;%
  ungroup()

head(city_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   country_id country city_id city   year population city_name order
##        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
## 1        392 Japan     21671 Tokyo  2020      38323 Tokyo         1
## 2        392 Japan     21671 Tokyo  2015      38001 Tokyo         1
## 3        392 Japan     21671 Tokyo  2025      37876 Tokyo         1
## 4        392 Japan     21671 Tokyo  2030      37190 Tokyo         1
## 5        392 Japan     21671 Tokyo  2010      36834 Tokyo         1
## 6        356 India     21228 Delhi  2030      36060 Delhi         2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get the id data for each unique city
id_data &amp;lt;- city_data %&amp;gt;%
  select(city_id, city_name, country_id, country) %&amp;gt;%
  unique() %&amp;gt;%
  #find the continent of each city
  mutate(continent = countrycode(.$country, origin = &amp;quot;country.name&amp;quot;, destination = &amp;quot;continent&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#the number of frames the output will contain
frames &amp;lt;- 500

#use tweenr to manually make the naimation frame data
frame_data &amp;lt;- city_data %&amp;gt;%
  group_by(year) %&amp;gt;%
  arrange(-population) %&amp;gt;%
  mutate(order = row_number()) %&amp;gt;%
  #tweenr stuff here
  select(city_id, year, population, order) %&amp;gt;%
  mutate(ease = &amp;quot;linear&amp;quot;) %&amp;gt;%
  tween_elements(., &amp;quot;year&amp;quot;, &amp;quot;city_id&amp;quot;, &amp;quot;ease&amp;quot;, nframes= frames) %&amp;gt;%
  #select out columns
  select(population, order, year, .frame, city_id = .group) %&amp;gt;%
  #merge in id data
  merge(., id_data, by = &amp;#39;city_id&amp;#39;) %&amp;gt;%
  #munge population numbers
  mutate(pop = round(population/1000, 2))

head(frame_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   city_id population    order     year .frame city_name country_id
## 1   20001    82.0000  849.000 1950.000      0     Herat          4
## 2   20001   565.0000 1213.000 2030.000    500     Herat          4
## 3   20001   101.1290 1141.129 1969.516    122     Herat          4
## 4   20001   245.2500 1510.250 2001.875    324     Herat          4
## 5   20001   178.2581 1314.000 1988.871    243     Herat          4
## 6   20001   335.7419 1516.419 2014.839    405     Herat          4
##       country continent  pop
## 1 Afghanistan      Asia 0.08
## 2 Afghanistan      Asia 0.56
## 3 Afghanistan      Asia 0.10
## 4 Afghanistan      Asia 0.25
## 5 Afghanistan      Asia 0.18
## 6 Afghanistan      Asia 0.34&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- frame_data %&amp;gt;%
  #only want to plot the top 10
  filter(order &amp;lt; 10.8) %&amp;gt;%
  ggplot(aes(y = order, x = pop)) +
  #hack to plot the moving bars
  #from v helpful answer at
  #https://stackoverflow.com/questions/53162821/
  #animated-sorted-bar-chart-with-bars-overtaking-each-other/53163549
  geom_tile(aes(x = pop/2, width = pop, fill = continent),
            alpha = 0.8, colour = &amp;quot;black&amp;quot;, height = 0.9) +
  geom_text(aes(label = sprintf(&amp;quot;%1.2f&amp;quot;,pop)), hjust = 1) +
  geom_text(aes(x = 0, label = paste(city_name, &amp;quot; &amp;quot;)),
            vjust = 0.2, hjust = 1) +
  #add labels to plot
  labs(title=&amp;#39;{round(as.numeric(closest_state))}&amp;#39;,
       x = &amp;quot;Population (millions)&amp;quot;, y = &amp;quot;&amp;quot;) +
  #y limits at 0-10.5
  #don&amp;#39;t clip as will screw the labels outside the plot
  coord_cartesian(ylim = c(0,10.5), clip = &amp;quot;off&amp;quot;) +
  #flip the y axis
  scale_y_reverse(position = &amp;quot;left&amp;quot;) +
  #theme stuff
  #taken from same stackoverflow answer
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0, size = 22),
        axis.ticks.y = element_blank(),
        axis.text.y  = element_blank(), 
        #make sure labels will be visible
        plot.margin = margin(0,0,0,2.5, &amp;quot;cm&amp;quot;)) +
  #transition by our calculated year
  transition_states(year, transition_length = 1, state_length = 0) +
  #scale x axis as pop increases
  view_follow(fixed_y = TRUE) +
  #fade as bares enter and exit the plot
  exit_fade() +
  enter_fade()

#save the gif
city_gif &amp;lt;- animate(p, frames, start_pause = 0.5, end_pause = 1)
#e.g. if you want to save the output
#anim_save(&amp;quot;city_gif.gif&amp;quot;, gif)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;city_gif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-11-17-gnarly_data_table_bar_charts_files/figure-html/plot_city_gif-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
